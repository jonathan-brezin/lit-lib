#!/usr/bin/env ruby
=begin <head>
Title: Literate Python Support Via Markdown
Author: Jonathan Brezin
Date: October, 2016
Show source: Yes
Tab Size: 3
=end
require "cmdline"
require "litsrc"

=begin <md>

## What <code>panpype</code> does ##

The idea is to create a document format that is legal Python while permitting one to include
[Pandoc](http://pandoc.org) markdown that allows one to turn the file easily into a ["pandoc"
document](http://pandoc.org/MANUAL.html#pandocs- markdown). This intermediate file has file type
"`.md`" and is passed to the `pandoc` command for transformation into HTML.  I extend the
markdown conventions only by

* using `'''` multi-line comment strings that begin with an identifying tag, either "`<head>`"
or "`<md>`", to hold the markdown, and

* using `#==> <show code>` and `#==> <hide code>` lines to filter what source code gets written
to the HTML output.

Both the beginning and ending `'''` may be preceeded by some white space on their line, but by
nothing else.  The `'''` that ends a head or markdown section may be followed immediately by some
white space and a comment of the form "`# </head>` or `# </md>`".  If the closing `</...>` tag is
provided, it must match the opening tag, as in HTML.

For more details see [`LiterateSource`'s documentation](litsrc.html), which describes the
command line parameters and the general philosophy behind this program.

=end

class Panpype < LiterateSource
   VERSION       = "1.0.1"
   UPDATED       = "2017-07-11"
   LANG_SPEC     = LanguageSpec.new(
      "python", "pype", "py",
      /^[ \t]*('''|""") +<(md|head)>[ \t]*\n?$/, 
      /^[ \t]*('''|""")([ \t]+#[ \t]*<\/(md|head)>)?[ \t]*\n?$/,
      /^[ \t]*#=(=*)>( *)<(show|hide)( code)?>[ \t]*\n?$/,
      true
      )
   def initialize(options)
      super options, LANG_SPEC
   end
end

# If this has been invoked directly from the command line...
cmd_names = Set.new ["panpype.rb", "panpype", "pythonmd.rb", "pythonmd"]
cmdname =  File.basename($PROGRAM_NAME)
if cmd_names.member? cmdname
   begin
      fromto = { from: "pype", to: "py"}
      args = CmdLine.parse(appname: cmdname, helpinfo: fromto) do |spec|
         LiterateSource.addCmdlineParameters spec
      end
   rescue RuntimeError => re 
      print("Could not parse the command line: ", re.message, "\n")
      exit(1001)
   end
   Panpype.new(args).process_files
   exit(0)
end
