=begin <head> 
Title: <code>sysutils</code>: Some Basic String and Other Methods
Author: Jonathan Brezin
Date: November, 2016
Show source: Yes
Tab Size: 3
=end 
require "set"

# cf https://www.ruby-forum.com/topic/65458
class Class
   def prohibit_subclassing!
      class << self
         def inherited(subclass)
            error = "Illegal attempt to subclass #{self} with #{subclass}"
            raise RuntimeError, error
         end
      end
   end
end

=begin <md>
## <code>Array</code> code versus <code>Set</code>

####<code>Array#add(*args)</code>

####<code>Set#push(*args)</code>

These are aliases for for appending one or more items to an instance, provided so that `Set`
and `Array` can be used more nearly interchangeably.

=end

class Array
   alias :add :push
end

class Set
   alias :add_one :add
   def add( *args )
      args.each {|arg| add_one arg}
   end
   alias :push :add
end

class Symbol
   def to_sym_string_pair
      [self, self.to_s]
   end
end

=begin <md>

## Some <code>String</code> class and instance methods

####<code>String.a_classname()</code> and <code>String.A_classname()</code> {#a_classname}

One of life's annoying problems is generating error messages with class names in them where
you want "a" or "an".  These calls clean that up:

<pre class="exampleCode">
        String.a_classname(3.1) ==> "a Float"
        String.A_classname(3.1) ==> "A Float"
        String.a_classname(Integer) ==> "an Integer"
</pre>

As you can see, the argument may be either an object or class.  I have these methods as `String`
class methods to be consistent with the same methods in Python, where I can't modify `object` to do
what I get below for `Object.a_or_an_type`.  The real work is done by a  `String` instance method:

#### <code>a_or_an(capitalize=false)</code>

The call prepends the appropriate indefinite article, followed by a single space.

#### <code>to_num()</code>

I get tired of checking whether I am converting to an integer or a float.  This call does the
obvious: if something can convert to an integer, it does so, otherwise it converts to a float.
Of course, if neither works, an `ArgumentError` is raised.  I could return `nil`, but that
seems like kicking the can down the road, so that when you do get in trouble it is no longer so
clear where the actual bad value got generated.

It's sad that the first place I needed this code was in [cmdline.rb](cmdline.html), where the
"nil" form would have been a little more convenient, since the value computed was irrelevant.
But that sort of call must be the exception, no?

##### <code>-(string_or_regexp)</code>

Deletes all copies of substrings that match its argument and returns the result.

<pre class="exampleCode">
          "abcbd"-'b'  ==> "acd"
          "abcbd"-/b./ ==> "a"
</pre>

####<code>expandtabs(s, tabs=8)</code>

If the string contains one or more tabs, this returns a copy in which all tab characters are
replaced by one or more spaces, the number depending on the current column where the tab is
found and on the set of tab stops specified by the argument, `tabs`.  If the string contains
no tabs, the string itself is returned: no copy is made.

There are two ways you can specify the tab stops: either provide a single number `n`, in which
case the tab stops are `n`, `2n`, `3n`..., or provide a sorted list of the tab stops.   The
default for `tabs` is `8`, not because it is what you'll want, but for historical reasons and
consistency with other languages.

For computing column numbers, the first position is the character either at the beginning of the
string or immediately following a newline character, so if `tabs` is `3` and a tab is found at
the fourth character after a newline, it will be replaced with 3 spaces and the next character
will be the seventh.

_It is an error, when a list of tab stops is provided, to encounter a tab that is beyond the
last tab stop in the line._  An exception will be raised.  What are we supposed to do
otherwise??  Leave the tab as is??

#### <code>downcase?</code> and <code>upcase?</code>

One of life's vexations is that different languages treat whether a given string is lower case
differently.  I have a simple rule that I implement regardless of the language. I call a string
"lower case" if it is identical with what happens if you replace all of the characters in it that
have lower case versions with those characters.  In Ruby terms, this means I ask that `s.downcase ==
s`.  For consistency with Ruby's conversion methods, I call the two methods `downcase?` and
`upcase?`.

=end

class String
   def self.a_classname(what)
      if not what.is_a? Class then what = what.class end
      what.name.a_or_an
   end
   def self.A_classname(what)
      if not what.is_a? Class then what = what.class end
      what.name.a_or_an(true)
   end
   def a_or_an(capitalize=false)
      if self.length == 0 then ""
      else
         first = self[0].downcase
         choices = if capitalize then ['A ','An '] else ['a ','an '] end
         if self.length > 1 and 'bcdfgjklmnpqrstvwxyz'.index(first) != nil
            choices[0] + self
         elsif (self.length == 1 and 'aefhimnorsx'.index(first)!= nil) or
                  ('aio'.index(first) != nil) or
                  (first == 'e' and 'uw'.index(self[1].downcase) == nil) or
                  (first == 'u' and self[1...3] != 'ni') or
                  (first == 'h' and self[1..5] == 'onest' or self[1..4] == 'onor')
            choices[1] + self
         else 
            choices[0] + self
         end
      end
   end
   def to_sym_string_pair
      [self.to_sym, self]
   end

   def to_num
      begin
         return Integer(self)
      rescue ArgumentError
         begin
            return Float(self)
         rescue ArgumentError
            erm = "'#{self}' cannot be converted to either an Integer or a Float."
            raise ArgumentError.new erm
         end
      end
   end

   def -(string_or_regexp)
      self.gsub(string_or_regexp, '')
   end
 
   def expandtabs(tabs=8)
      def first_after(tabs, tab_column)
         last = tabs[-1]
         if tab_column >= last
            raise "Tab in column #{tab_column}, which is beyond the last tab stop, #{last}"
         end
         (0 ... tabs.length).each do |n|
            if tabs[n] > tab_column
               return tabs[n]
            end
         end
      end
      if index("\t").nil?
         return self
      end
      evenly_spaced = tabs.is_a? Integer
      answer = ''
      lines = self.scan /[^\n]*\n?/
      lines.each do |line|
         sections = line.split /(\t)/
         expanded = ''
         sections.each do |section|
            if section.length == 0 then next
            elsif section[0] != "\t" then expanded += section
            else # expand the tab
               current_column = expanded.length
               if evenly_spaced
                  mod_tabs = current_column % tabs
                  need = tabs - mod_tabs
               else
                  tab_stop = first_after tabs, current_column
                  need = tab_stop - current_column
               end
               expanded += ' '*need
            end
         end
         answer += expanded
      end
      answer
   end

   def downcase?
      downcase == self
   end

   def upcase?
      upcase == self
   end
end

=begin <md>

## Boolean conversions {#boolean_conversions}

The goal is to have a convenient shorthand for converting a value that may or may not be a 
valid boolean--_i.e._ `true` or `false`--to one of those two values, or if the value should
not be converted, to throw a `ArgumentError`

####<code>Object#to_b()</code> {#to_b}

This call raises an `ArgumentError`, because it is each class's responsibility to implement its
own `to_b()`, if it wants to perform a conversion.

####<code>FalseClass#to_b()</code> and <code>TrueClass#to_b()</code> {#boolean_to_b}

returns its caller, _e.g._: `false.to_b == false`.

####<code>Numeric#to_b()</code> {#number_to_b}

This call converts `1` and `0` to `true` and `false`, respectively.  All other values raise an
`ArgumentError`.

####<code>String#to_b()</code> {#string_to_b}

The call returns the appropriate boolean if the caller is in the current list of recognized
strings.  Otherwise, it raises an `ArgumentError`.  There are two class variables that initially
hold a minimal set of words which will be recognized as having clear and unmistakable meanings
_in English_ as booleans:

> "true", "yes", "ok", "on", and "1" imply `true`, and

> "false", "no", "off", and "0" imply `false`.

These are what `to_b` understands by default.  You are free to add to this list as suits your
taste and budget by calling `String.add_boolean`, _e.g._ to add some French

<pre class="exampleCode">
      String.add_boolean yes: 'oui', no: 'non'
      String.add_boolean yes: 'vrai', no: 'faux'
</pre>

##### <code>String.add_boolean(yes: nil, no: nil)</code> {#add_boolean}

The arguments being keyword arguments, you need not, of course, supply both. One or the other is
fine.  What string you add are entirely up to you.  There are no checks for good taste or
anything else.

=end

class FalseClass
   def to_b
      return self
   end
end

class TrueClass
   def to_b
      return self
   end
end

class Numeric
   def to_b
      if self == 1 then true
      elsif self == 0 then false
      else
         raise ArgumentError.new "cannot convert #{self} to a Boolean"
      end
   end
end

class Object
   def boolean?
      self == true || self == false
   end
   def to_b
      raise NoMethodError.new "#{self.class.name} does not implement 'to_b'"
   end
end

class String
   @@true_words = Set.new %w[true yes on ok 1]
   @@false_words = Set.new %w[false no off 0]
   def self.add_boolean(yes: nil, no: nil)
      if not yes.nil?
         @@true_words.add yes.downcase
      end
      if not no.nil?
         @@false_words.add no.downcase
      end
   end
   def to_b
      if @@true_words.member?(self.downcase)
         true
      elsif @@false_words.member?(self.downcase)
         false
      else
         raise ArgumentError.new "'#{self}' is not convertible to a Boolean"
      end
   end
end

=begin <md>

## <code>nil</code> as a <code>Symbol</code>

I find it convenient not to raise an exception when requesting that a value that might be `nil`
be converted to a symbol.  Instead, `nil.to_sym` returns the value `nil`.

=end

if not nil.respond_to? :to_sym
   class NilClass
      def to_sym; nil end
   end
end

=begin <md>

## Indefinite article plus a class name

#### <code>a_or_an_type()</code>

#### <code>A_or_An_type()</code>

These methods wrap the `String` methods `[a|A]_classname` so you can call them for any `Object`.
Both return a `String`: _e.g._ `3.0._a_or_an_` returns "a Float".

=end

class Object
   def a_or_an_type
      String.a_classname(self)
   end
   def A_or_An_type
      String.A_classname(self)
   end
end