""" <head> 
Title: Quicksort in Pure Python
Author: Jonathan Brezin
Date: November, 2015
Show source: yes
""" # </head>

import dbg
from stack import TypedStack
import math

""" <md>

### <code>Quicksort(a, **kwargs)</code>

#### The API ####

The argument keys and their default values are:

            Keyword        Semantics                                           Default Value
------------------- ------ -------------------------------------------- ------ ----------------
`start`             &nbsp; first index in `a` of the subarray to sort   &nbsp;      `0` 
`stop`                     first index AFTER the subarray to sort               `a`'s length
`cmp`                      function used to compare two entries                   `None`
`max_for_insertion`        maximum array size that uses insertion sort             `6`
`min_for_median`           smallest size using "median of 3 medians"              `40`
------------------- ------ -------------------------------------------- ------ ----------------

Quicksort is a method for sorting in place an array with entries of arbitrary type.  This call does
the operation in-place on the slice `a[start:stop]` of the array "`a`".  The return value is the
array `a[]` itself.  

For arrays of strings or numbers, use the built-in `list.sort()`, which is surely much faster.  This
code is intended for cases where you need to provide the ordering function, realized here as the
keyword argument  "`cmp`".  

> The API for `cmp` is the usual one: `cmp(x,y)` returns a value that is 

>> `> 0` if `x` is greater than `y`,\
`= 0` if `x` and `y` are "equal", and \
`< 0` if `x` is less than `y`. 

For those not familiar with this convention, its rationale can be understood by thinking about what
happens when you have a pair of possibly very long strings s1 and s2, and you need to evaluate a
conditional expression that looks like

<pre class="exampleCode">

   if s1 < s2 ... do something; elif s1 == s2 ... do something else

</pre>

The last thing you want to do is to perform two comparisons of `s1` against `s2`, which is what the
code fragment above would do.  That's where `cmp` comes in: `cmp(s1, s2)` can figure out its return
value in a single traversal of the strings that stops at the first index where the two differ.  The
conditional becomes

<pre class="exampleCode">

   c = cmp(s1,s2);  if c < 0 ... do something; elif c == 0 ... do something else

</pre>

There are still two comparisons, but both are very cheap.

Insertion sort, and not Quicksort, is the fastest game in town for small arrays, hence the  argument
`max_for_insertion`.  My choice of the default breakeven point for Quicksort versus insertion sort
is based on empirical work in  [Jon L. Bentley and M. Douglas McIlroy. 1993. <i>Engineering a sort
function</i>. Softw. Pract. Exper. 23, 11 (November 1993),
1249-1265](http:dl.acm.org/citation.cfm?id=172710>), as is my decision to use a "median of 3
medians" sample for a partition value when there are at least 40 elements in the array (as opposed
to just using the entry in the middle of the currently active subarray).

#### Comments on the code ####

The strategy is tail recursive.  You choose a value in the current subarray, the "partition
value", and use it to group the current subarray into three smaller subarrays `left`, `middle`
and `right`, in which: every element of `left` is less than the partition value, every element of
`middle` equals that value, and every element of `right` is greater.  You are then left with the
problem of sorting `left` and `right`.  Even for arrays of modest size, you want to avoid a bad
choice for the partition value, one nearly the largest or smallest entry.  The technique here
is to look at three sets of 3 values from various parts of the subarray.  The median of each
set is found, and then the median of these 3 medians is used as the partition value. One could
still be unlucky, but it is certainly a better bet than simply taking one random value from
somewhere in the middle of the current subarray.

One confusing bit in this code is that, since we do not know _a priori_ where or how often the
partition value occurs in the subarray, we have to be a little clever in how we isolate them.
The strategy is to work from outside in from both ends of the subarray and leave the partition
values we encounter at these two ends, so our first pass leaves us with something close to, but
not quite, what we want:
<pre class=`exampleCode`>

            (partition values, less, greater, more partition values)

</pre>
Once we have the four subarrays as above, we can swap the rightmost few entries in the `less`
subarray with those of the subarray `partition values` to its left, and do the analogous thing
for the `greater` subarray and the subarray `more partition values` to its right. The end
result is   
<pre class=`exampleCode`>

            (less, partition values, more partition values, greater)  

</pre>
This is the partition we really wanted in the first place: smaller to the left, larger to the
right, however many partition values in the middle.  The important thing is that we are _not_
shifting the whole `less` or `greater` subarray to move the partition values.  We are just
swapping as many off the end of each as we need to move the partition values.

There are two possible types of comparisons one can have for ordering the data: native (use `x<y`)
or supplied (use `cmp(x,y)<0`). We take advantage of native comparisons when we can in computing the
medians. `medianNear`, defined immediately below is a function that, given an index `k` into `a`,
returns the median of the three values `a[k-2]`, `a[k]` and `a[k+2]`.  This is not a situation
where the same pair of values is compared twice.

""" # </md>
def Quicksort(a, *, start=0, stop=None, cmp=None, max_for_insertion = 6, min_for_median=40):

   if cmp is None: # use the native comparison
      cmp = lambda x, y: 1 if x > y else (-1 if x < y else 0)
      def medianNear(k): 
         x = a[k-2]; y = a[k]; z = a[k+2]
         if x < y:
            return y if y < z else ( z if x < z else x )                       
         else:
            return x if x < z else ( z if y < z else y )
   else:
      def medianNear(k):
         x = a[k-2]; y = a[k]; z = a[k+2]
         if cmp(x,y) < 0:
            return y if cmp(y,z) < 0 else ( z if cmp(x,z) < 0 else x )                       
         else:
            return x if cmp(x,z) < 0 else ( z if cmp(y,z) < 0 else y )

   dbg = dbg.getDbgMgr()
   inner_in_dbg = ("inner" in dbg); outer_in_dbg = ("outer" in dbg)
   move_in_dbg = ("move" in dbg);   swap_in_dbg = ("swap" in dbg)
   left_in_dbg = ("left" in dbg);   middle_in_dbg = ("middle" in dbg)
   right_in_dbg = ("right" in dbg)

   initialRange = range(start, len(a) if stop is None else stop)
   size         = len(initialRange) # "size" is always the length of some subarray of "a"
   stack        = TypedStack(range, maxlen=size) 
   stack.push(initialRange)
   while stack.size > 0:
      # quicksort is tail recursive: this outer loop tracks the remaining work
      currentRange = stack.pop()
      start = currentRange.start; stop = currentRange.stop; size = len(currentRange)
      if size <= max_for_insertion: # insertion sort: faster once size is around 8 or so?
         for i in range(start+1, stop):
            a_i = a[i]
            j = i - 1 # eventually j is the first element before i-th with a[i] <= a[j]
            while j>=start and cmp(a_i, a[j]) < 0: 
               a[j+1] = a[j] # shift right to make room for a_i
               j -= 1
            # j==start-1 or a[i] >= a[j]
            a[j+1] = a_i
      else:
         middle = start+ size//2
         if size<=min_for_median: partitionValue = a[middle]
         else:
            last = stop-1
            left = medianNear(start+2); middle = medianNear(middle); right = medianNear(last-2)
            # median of the medians near the start, middle, and end of the segment:
            if cmp(left,middle) < 0:
               if cmp(middle,right) < 0: partitionValue = middle
               elif cmp(left,right) < 0: partitionValue = right
               else: partitionValue = left                    
            else:
               if cmp(left,right) < 0: partitionValue = left
               elif cmp(middle,right) < 0: partitionValue = right
               else: partitionValue = middle
         firstLessOnLeft     = start       # first index that MIGHT have a value < partition
         nextLeft            = firstLessOnLeft # the next entry on the left to look at
         lastOnRight         = stop - 1    # last valid index to the right of the partition
         firstGreaterOnRight = lastOnRight # where the first > partition might be
         nextRight           = lastOnRight # the first index on the right to check
         if outer_in_dbg:
            msg = "########### start={0}, stop={1} count={2} ###########"
            print(msg.format(start, stop, stop-start))
         while True:     
            while nextLeft <= nextRight: # work in from the left
               nextLeftRelMedian = cmp(a[nextLeft], partitionValue)
               if middle_in_dbg:
                  print("left {0}: {1}>{2}?".format(nextLeft,a[nextLeft],partitionValue))
               if nextLeftRelMedian > 0: 
                  if inner_in_dbg: print("left breaking nl={0}".format(nextLeft)) 
                  break
               elif nextLeftRelMedian is 0: # push the partition value to the left end
                  temp = a[firstLessOnLeft]
                  if inner_in_dbg:
                     msg = "left: swap {0} at {1} for {2} at {3}"
                     print(msg.format(temp,firstLessOnLeft,a[nextLeft],nextLeft))
                  a[firstLessOnLeft] = a[nextLeft]
                  a[nextLeft] = temp
                  firstLessOnLeft += 1
               nextLeft += 1
            while(nextLeft <= nextRight): # work in from the right
               nextRightRelMedian = cmp(a[nextRight], partitionValue)
               if inner_in_dbg:
                  msg = "right {0}: {1}<{2}?"
                  print(msg.format(nextRight,a[nextRight],partitionValue))
               if nextRightRelMedian < 0:
                  if inner_in_dbg: print("right breaking nr={0}".format(nextRight)) 
                  break
               elif nextRightRelMedian is 0: # push the partition value to the right end
                  temp = a[firstGreaterOnRight]
                  if inner_in_dbg:
                     msg = "right: swap {0} at {1} for {2} at {3}"
                     print(msg.format(temp,firstGreaterOnRight, a[nextRight],nextRight))
                  a[firstGreaterOnRight] = a[nextRight]
                  a[nextRight] = temp
                  firstGreaterOnRight -= 1
               nextRight -= 1
            if nextLeft > nextRight:
               if middle_in_dbg: 
                  print("breaking nl={0}>nr={1}".format(nextLeft, nextRight)) 
               break
            temp = a[nextRight]
            if swap_in_dbg:
               msg = "value swap {0} at {1} for {2} at {3}"
               print(msg.format(temp,nextRight,a[nextLeft],nextLeft))
            a[nextRight] = a[nextLeft]
            a[nextLeft] = temp
            nextLeft += 1
            nextRight -= 1
            if middle_in_dbg:
               print("end while true: a="+str(a))
               msg = "{0}<{1}<{2}<{3}"
               print(msg.format(firstLessOnLeft,nextLeft,nextRight,firstGreaterOnRight))
         if outer_in_dbg:
            print("pv="+str(partitionValue)+" and a before swap="+str(a))
            print("[{0}:{1}:{2}] min({3},{4})".format(
               start, firstLessOnLeft,nextLeft,firstLessOnLeft-start,
               nextLeft-firstLessOnLeft))
            print("[{0}:{1}:{2}] min({3},{4})".format(
               nextRight, firstGreaterOnRight,lastOnRight,firstGreaterOnRight-nextRight,
               lastOnRight-firstGreaterOnRight))
         # move all the partition value entries to the middle
         valuesToMoveOnLeft = min(firstLessOnLeft-start, nextLeft-firstLessOnLeft)
         if valuesToMoveOnLeft > 0:
            firstPV = nextLeft - 1
            for i in range(0, valuesToMoveOnLeft):
               if move_in_dbg: 
                  print("{0}=s+i and {1}=fpv-i".format(start+i, firstPV-i))
               a[start+i]    = a[firstPV-i]
               a[firstPV-i] = partitionValue
         valuesToMoveOnRight = min(firstGreaterOnRight-nextRight,
                  lastOnRight-firstGreaterOnRight)
         if valuesToMoveOnRight > 0:
            firstPV = nextRight + 1
            for i in range(0, valuesToMoveOnRight):
               if move_in_dbg:
                  print("{0}=lr-i and {1}=fpv+i".format(lastOnRight-i, firstPV+i))
               a[lastOnRight-i] = a[firstPV+i]
               a[firstPV+i] = partitionValue
         leftSize  = nextLeft - firstLessOnLeft
         rightSize = firstGreaterOnRight - nextRight
         if leftSize > 1: stack.push(range(start, start+leftSize))
         if rightSize > 1: stack.push(range(stop-rightSize, stop))
   return a

""" <md>

The debugging printouts are filtered using the [`dbg`](dbg.html) module.  The keywords are available
as the return value from 

#### <code>Quicksort.debugkeys()</code>

which is a list of the strings.  To turn on debugging output, call

#### <code>Quicksort.debug(commaSeparatedKeyList)</code> 

with a comma-separated list of the keys you want honored, or with `"*"` to get them all in one shot.
The return value is the [debugging manager](dbg.html#dbgmgr_class), which means you have the full
API from the `dbg` module available, in particular the ability to turn of the keys you activated.
The output goes to `stdout`.  I don't use the fancy HTML buffering, because compactness of the
output is important, and the time order in which messages are generated is the only sensible display
order.  

""" # </md>

Quicksort.debug = lambda commaSeparatedKeys: dbg.getDbgMgr(commaSeparatedKeys)
Quicksort.debugkeys = lambda: ["inner", "left", "middle", "move", "outer", "right", "swap"]
