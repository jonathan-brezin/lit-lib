""" <head> 

Title: Filtered debugging output
Author: Jonathan Brezin
Date: April, 2016
Show source: True

"""
""" <md>

One of the standard problems of adding verbose debugging output to a program, almost no matter how
modest the program, is that it is hard not to be too verbose--so verbose that it can be hard to see
the output that is immediately important.  The job here, therefore, is to allow one to leave a lot
of debugging code in place, but make it easy to filter what one sees on any one execution.  There
are probably more sophisticated ways to so that than the two faciliities I am implementing here, but
they work well enough for me almost all of the time.

The heart of the implementation is the `DbgMgr` class.  It is a [singleton class](singleton.pype),
whose unique instance I'll call the "debug manager", or more often, just "the manager".  The class,
as you would expect for a singleton, is not expected to be accessed directly as such. There are two
module-level functions, `getDbgMgr` and `openDbgMgr` that return the manager, appropriately
initialized. The next two sections describe what each of these two has to offer.

## <code>getDbgMgr(&ast;patterns)</code>: a naive, but useful first step {#getdbgmgr}

The arguments are a set of patterns, if any, to activate.  Each argument is a string that is a
comma-separated list of the patterns, e.g. `"cart, *_in, *_out"`.  White space around the keys is
ignored, and asterisks are treated as wildcards.  At most one "*" can appear in a pattern. It may
appear anywhere in the pattern.  If you add "*" itself as a pattern, every key in the code being
debugged will be honored.

You bootstrap the manager with an initial set of key patterns to honor:

<pre class="exampleCode">

import dbg
dbgmgr = dbg.DbgMgr("io,user,cart,history")

</pre>

or if you prefer:

<pre class="exampleCode">

import dbg
dbgmgr = dbg.getDbgMgr("io", "user", "cart", "history")

</pre>

The idiom for writing debugging code is then simply:

<pre class="exampleCode">

if "io" in dbgmgr:
   print("IO, IO, it's off to stderr we go!", file=sys.stderr)
   # or do whatever other sort of work your debugging requires here

</pre>

`getDbgMgr` uses a single set-like object, a [`WildCardLookup`](WildCardLookup.html) to be precise,
to maintain a list of patterns for keywords that name sets of debug print statements or other code
needed only for debugging.  You can activate more patterns or remove unneeded patterns at any time
by calling [`dbgmgr.add_patterns`](#add_patternsnew_patterns) or
[`dbgmgr.remove_patterns`](#remove_patternsdead_patterns).  You can also add patterns by calling
`getDbgMgr` again with the new patterns as arguments.

> `getDbgMgr` is safe to call anywhere, at any time, with no arguments.  The call just returns the
manager. This is the normal way a library module _that wants to work directly with the manager as
in the example above_ should ask for it.

Only those debugging statements are executed that are guarded by keywords that match patterns which
have been added to the manager. You can imagine programs with keys `"io"`, `"user"`, `"cart"`,
`"history"`, and the like, that partition the debugging output into semantically sensible groups,
only one of which is likely to be of interest at any one time.

The example of `"io"`, `"user"`, etc is a little misleading in that it might tempt you to think that
one could use a plain vanilla `set` to track the keys.  That turns out to be too restrictive in
practice.  It is useful, particularly in the early going of the debugging game, to be able to turn
on a number of related keys, like `"user_name"`, `"user_email"`, etc.  The wild-card pattern
`"user_*"` does what you need.  Once the code is a little more stable, though, even`"user_*"` may
spit out far too much for whatever problem you are chasing down, so you can enter just the one or
two individual `"user_..."` keys that you need.

> __A Word About Words__: In order to avoid massive confusion, I will always talk about "patterns"
being held to be matched later by "keys".  "keys" appear as guards, "patterns" are used to check
those "keys".  Not every pattern need have a wild-card, of course, and while it would not be
unreasonable to call such a wild-card free pattern a "key", I will still call it a "pattern".

For a non-trivial example of this approach in action, take a look at the [`qsort`](qsort.html)
module, which is a pure Python implementation of the "quicksort" algorithm.  There's only one
function, but it involves a triply nested loop with two innermost loops, so there are a number of
different contexts where it is natural to focus one's attention.  The code uses half a dozen or so
keys to allow one to do just that.  In this example, limiting the output is important, because if
you turn all of the patterns on, you can get overwhelmed: remember, it is a three-deep nested set of
loops doing an `nlog(n)` sorting algorithm on an array of size `n`.

"""

from blist import blist
import html
import inspect
import io
import os
from singleton import OneOnly
from sys import stdout, stderr
import sysutils as su
import time
import traceback
from wildcardlookup import WildCardLookup

def getDbgMgr(*patterns):
   mgr = DbgMgr.get()
   mgr.add_patterns(*patterns)
   return mgr
        
""" <md>

##<code>openDbgMgr(&ast;patterns, &ast;&ast;kwargs)</code>: a more elaborate tool {#opendbgmgr}

`getDbgMgr` is adequate for a lot of projects, but once things get a little involved, one often
needs something more elaborate, which is where `openDbgMgr` comes in.  Its positional arguments are
the initial patterns to register, either strings that are comma-separated lists or lists of such
strings.  Leading and trailing white space is trimmed from these patterns.  It has two keyword
arguments, "`path`" and "`sortby`".  

> _`path`_ names the directory into which to put the HTML output file.  The default is the "`log`"
subdirectory of the current working directory.  The debugging output will be written to [a file in
that directory](#output_stream).
 
> _`sortby`_ is one of the strings `"time"`, `"key"`, `"match"`, or `"source"`.  Normally
messages are displayed in the order generated--in other words, sorted by "time".  Since the 
messages are being buffered and only streamed when the buffer is flushed, we are free to 
sort by other "keys".  More on that will be found [below.](#sorting_info)

This call is the moral equivalent of a `File` open call.  One may not want to clutter `stderr` with
kilobytes or more of debugging output, if only in order to avoid hiding genuine error messages that
you know should be sent there, so creating a log file with its own output stream is a common need
and is the approach that is taken here. There is more at stake, though, like automatically
decorating the messages with additional information:

1) Tracking the "source" of the messages may be useful.  The debug keys serve as one possible
"source", but it is better in many cases to use the name of the calling function that wrote the
message.  Part of the job here is to relieve the user of supplying that name &mdash; if I am the
currently executing Python code object, I know my caller's name. even if it is just a lambda.  The
Python library `inspect` module entry `currentframe` has the information I need.

2) The patterns as well as actual keys used for filtering in `getDbgMgr` can be also used to sort the
messages into groups that are displayed contiguously in the final output. This implies buffering
the debugging output as long as possible.  Temporal order is not the only interesting one.

3) Once you decide to create a log file, you might as well really decorate the messages and make the
output HTML, so that you can use distinct styles for real error messages, warnings, and (last, but
not least) plain-old debugging output.

4) Similarly, you might wish to signal some of the debugging output as "high priority".  Since
we are in HTML-land now, some simple CSS will carry the day here.  We can create as many message
types as is convenient by extending a basic message class.

5) When your application raises an error, it is convenient to copy the error into the debugging
buffer before blowing the app out of the water.  That is the job of [the `err` method.](#errtext)

[context_manager]: https://docs.python.org/3/reference/datamodel.html#context-managers

__A final word:__  Remember, `openDbgMgr` is like any other stream opener: meant to be called once
and once only.  Execute `getDbgMgr()` to get a debug manager, or pass the debug manager around
from the "main".


### The output stream {#output_stream}

`openDbgMgr` opens an output stream to a `File`. You can revert to streaming to `stdout`, `stderr`,
or any other stream later on by assigning that value to `dbgmgr.stream`.  The effect of such an
assignment is to flush the current buffer to the original stream, then, if it is not `stdout` or
`stderr`, to close that stream and finally, to start writing to the new stream.  You can also close
the output stream and revert to streaming to `stderr` by assigning `None` to `dbgmgr.stream`.

The manager has four methods for creating buffered output: `dbg`, `pre`, `warn` and `err`.  Each
adds its output to an output buffer. They are safe to call at any time, even if all you called
to get the manager was `getDbgMgr`.  Just make sure to call the _`close`_ method to  flush the
buffer when you are done spewing messages.  Unless you explicitly set `dbgmgr.stream` to
`stdout` or a file stream, all output will be flushed to `stderr`.

In addition to calling `add_patterns`, you can register patterns by calling `raise_priority` which
both registers the pattern, if it is not already there, and then makes sure it has high priority.
This call works even for unopened managers, but has an effect only if you use the buffered `dbg`
and `pre` calls.

The manager can be used to create a ["managed context"][context_manager].  Here is a call that
registers a few patterns and opens the output file in the default directory with the default sort
order:

<blockquote><pre class="exampleCode">

import dbg
with openDbgMgr("a, a_*, *b, a*b") as dbgmgr:
   # the code to be debugged goes here
   # ...

</pre></blockquote>

Doing this in a `with` statement assures that  when control leaves that context, all of the buffered
output will be flushed to the log file, and the log file will be closed, unless it is `stdout` or
`stderr`.  I think it is probably not a good idea to close either of the standard streams
"implicitly".  It is too easy to lose output that you have every reason to expect, even though the
debug manager has quit.

### A few words about sorting {#sorting_info}

You can change the sort order whenever convenient.  Sorting is done on flushing the stream.  In
particular, closing the stream will flush any messages in the buffer in sorted order.

If `sortby`'s value is `"key"`, error messages will appear first, then warnings, both in the
order generated. Then the  ordinary debugging output will appear, with all of the messages
guarded by a given key grouped together and displayed, within the group, in the order they were
generated.

Sorting with `sortby` equal to `"match"` is a slight variation on this theme. The sorting of
the debugging output is done not on the basis of the key that actually guarded the request, but
on the basis of the _weakest pattern in the wild-card set that matches the key at the time the
message is buffered._  "Weaker" means "matches more strings", versus "stricter", meaning
"matches fewer strings".  For example, if you have a bunch of input debugging keys named
`in_...`,  and if `in_*` is alive when the messages are buffered, all of the `in_...`
messages will appear, in the order generated, in a single group.

Sorting by `"source"` uses the name of the function that generated the message as the attribute
on which to sort.  The function name is used for sorting _all_ the messages, _including errors
and warnings._ Again, the messages for each function appear in the order generated.

"""

def openDbgMgr(*patterns, **kwargs): 
   mgr = DbgMgr.get()
   mgr.add_patterns(patterns)
   if mgr.path is None:
      path = su.getitem(kwargs, "path", None)
      mgr._open(path)
      mgr.sortby = su.getitem(kwargs, "sortby", "time")
   return mgr
   
""" <md>

## The <code>DbgMessage</code> class

The debug manager buffers its messages as a `list` of instances of the `DbgMessage` class. There are
two reasons for having such a class and not just buffering the message texts: the look and feel of
individual messages and the overall organization of the output.   By keeping the CSS "class" of a
message as part of the message is easy to apply different CSS styles to messages whenever
convenient, and by keeping at hand a message's key (if it has one) and name of the function
requesting the output, one can easily sort the messages in ways other than simply by order
generated.

There are four styles of message realized by classes that come "out of the box": errors, warnings,
high priority HTML text, and ordinary HTML text.  If you can live with this taxonomy, `DbgMgr` has
methods for creating and buffering each.  In addition, one can specify for both high priority and
ordinary output whether it needs to be in an HTML `<pre>` element or not.

For an example of how to add your own message style, see the interface class in the module
[idbg](idbg.html).

Five fields in a message govern its sort order.

> `display_priority`: a number that is used to order the messages crudely by type when the order is
not simply by time.  Each `DbgMessage` subclass has a default value: 0 for error messages, 1 for
warnings and 2 for everything else.  Messages are sorted by ascending `display_priority`.  You can
overwrite the field for any message or set of messages, and provide your own (floating point) values
for your own classes that extend those here.  For example, if you want to separate the high priority
messages from the low by more than just the output style, you could use `1.5` as the
`display_priority` for high priority messages.  The high priority messages will then all follow
immediately after the warnings and before any low priority messages.

> `key`: the string that actually appeared as the guard in the call that lead to a message
being buffered.

> `weakest_match`: the string that is the weakest pattern that matches the key and was alive at the
time the message was buffered.

> `caller`: the name of the function that called the manager to buffer the message.

> `index`: a number that yields the order in which messages are buffered.  When I speak of sorting
"by order generated", this is the field I am using to order the messages.

"""

class DbgMessage:
   DEFAULTS = {
      "key": "",              # not used by errors and warnings
      "weakest_match": None,  # weakest pattern that matches the key (if key is non-empty)
      "display_priority": 3,  # the priority assigned to ordinary debugging output
      "caller": '??',         # should always be supplied by the caller
      "body": "",             # should always be supplied by the caller
      "index": -1,            # should always be supplied by the caller
      "style_class": "ordinary_msg" # ordinary, non-priority debugging output
   }
   def __init__(self, parms_in):
      parms = su.mergepairs(parms_in, self.DEFAULTS, clone=True)
      self.key = parms['key']
      self.match = parms['weakest_match'] if parms['weakest_match'] else parms['key']
      self.display_priority = parms['display_priority']
      self.caller = parms['caller']
      self.body = parms['body']
      self.index = parms['index']
      self.style_class = parms['style_class']

   def __eq__(self, other):
      self.index is other.index

   def __ne__(self, other):
      not (self.index is other.index)

   def __lt__(self, other):
      # the display priority always rules:
      if self.display_priority < other.display_priority:
         return True
      elif self.display_priority is other.display_priority:
         if self.key is None: 
            # both are either an error or a warning, so the index rules
            return self.index < other.index
         else:
             # Both must be debugging messages, since they have the same priority and
             # are not errors or warnings. They should both, therefore, have keys,
             # weakest matches, and sources.
            pivot = DbgMgr.get().sortby
            if pivot == "key":
               if self.key < other.key:
                  return True
               elif self.key == other.key:
                  if self.index < other.index:
                     return True
            elif pivot == "match":
               if self.match < other.match: 
                  return True
               elif self.match == other.match:
                  if self.index < other.index:
                     return True
            elif pivot == "source":
               if self.source < other.source:
                  return True
               elif self.source == other.source:
                  if self.index < other.index:
                     return True
      return False

   def __le__(self, other):
      return self.__lt__(other) or self.__eq__(other)

   def __gt__(self, other):
      return not (self.__lt__(other) or self.__eq__(other))

   def __ge__(self, other):
      return not self.__lt__(other)

   def __str__(self):
      from_key = "[{}]".format(self.key) if self.key else ""
      clean_caller =  html.escape(self.caller)
      about = "<span class=\"msg_source\">{0}: {1}{2}</span>".format(
         self.index, clean_caller, from_key
      )
      table = "<table class=\"{0}\"><tr><td>{1}</td></tr></table>".format(
         self.style_class, self.body
      )
      return about+table

""" <md>

## The <code>DbgMgr class</code> and the manager's API ##

As noted at the outset, there is a unique instance, "the manager", of the `DbgMgr` class.  For
reasons discussed in the [`singleton` module](singeton.html), the use of a class as a singleton
object is not very Pythonic, so much so that there is a whole bunch of articles about the
appropriate use of [`@classmethod`](https://docs.python.org/3/library/functions.html#classmethod),
which is the natural sort of method to use, because it treats the class as "`self`".  I chose to go
with the route that uses a "get" method to get the unique instance, to make it clear that you are
retrieving something, not necessarily creating the thing retrieved.

### The <code>in</code>, <code>with</code> and <code>[]</code> operators {#operators}

A `DbgMgr` manages three aggregates: the set of live patterns, the subset of those patterns
that have high priority, and the buffered list of output messages that have not yet been
streamed out to the log file.  In order to make the transition from `getDbgMgr` to `openDbgMgr` as
easy as possible, the `in` operator is implemented here solely in terms of the set of live
patterns.  The code

<pre class="exampleCode">

dbgmgr = openDbgMgr("...<i>patterns</i>...", path="../log")  # or getDbgMgr()
# ...
if key in dbgmgr: 
   ...

</pre>

does what you think: it checks whether `key` is matched by a currently active pattern. You can also
iterate over the active pattern set: the statement

<pre class="exampleCode">

for pattern in dbgmgr: 
   ...

</pre>

iterates over all of the currently active patterns (high priority and low) in `dbgmgr`. 

For a simple example of this API in action, see [dbgmgr_test.py](examples/dbgmgr_test.py).

The expression `dbgmgr[value]` is available and has different interpretations, depending on the
type of `value`.  

* If it is an integer, the entry in the message list at position `value` is returned.

* If `value` is a slice or range, the corresponding sublist of the message buffer list is
returned.

* If `value` is a string, it is interpreted as a comma-separated list of patterns.  A
[`WildCardLookup`](WildCardLookup.html) is created with these patterns, and the value for each
pattern being the list consisting of all of the messages in the buffer whose key is matches the
pattern.

### Methods for maintaining the pattern set ###

#### <code>add_patterns(new_patterns)</code> ####

adds the patterns named by `new_patterns` to the active set.  The value of `new_patterns` is
like that of the pattern-valued arguments for `getDbgMgr()`.

#### <code>remove_patterns(dead_patterns)</code> ####

removes the patterns named by `dead_patterns` from the active set.

#### <code>raise_priority(new_patterns)</code> ####

makes the key patterns high priority, adding to the ordinary pattern set if need be.

#### <code>lower_priority(ptns)</code> ####

lowers the patterns in the list from high priority to ordinary priority.  Patterns not found are
ignore

#### <code>all_matched(keys)</code> ####

returns `True` if the keys specified by its argument are all matched by something in the current
pattern set.  The argument type is the same as that for the [corresponding method of
`WildCardLookup`](wildcardlookup.html#allmatchedkeys).

#### <code>any_matched(keys)</code> ####

returns `True` if at least one of the keys specified by its argument is
matched by something in the current pattern set.  The argument type is the same as that for the
[corresponding method of `WildCardLookup`](wildcardlookup.html#anymatchedkeys).

### Methods for writing output  ###

#### <code>addstyleclass(name, spec)</code> ####

adds the CSS class "`name`" with specification "`spec`" to the set of message style classes.
This is needed when adding a new message class.  You can have a leading "." in the name, which is
the normal CSS convention.  The idea here is not to encourage wild addition of classy CSS.  I just
want to make it easy to add new message types with distinct appearances.

#### <code>buffer_message(msg)</code> 

adds an instance of `DbgMessage` to the buffer.  This is only needed if you want to define your
own message styles.  The four styles described in the next four methods are all buffered by
those calls.

#### <code>dbg(key, text, src=None, style=None, now=False)</code> ####

if the `key` matches an active pattern, writes the text, as is, as the body of a debugging
message.  "as is" means that no HTML escape translation is done... what you pass is what gets
written, so it has to be valid HTML 5.  

The optional argument "`src`" allows one to specify who the caller should be shown to be.  If its
value is `None`, the name of the actual caller of `dbg` is computed for you and used; otherwise,
your value for `src` is.   This is here because interfaces like [`DbgClient`](idbg.html) need
to supply a caller, because otherwise all the calls to `dbg` will appear to have come from it!.

If you wish to supply your own CSS style for the message, `style` should be its name, and you should
have added to to the manager's list.  If you are happy with my defaults, at least be assured that a
distinct CSS style will be used for keys that match high priority patterns, so they should be
immediately visible as such.

The final argument `now` governs whether to flush the buffer after this message is added.  If `now`
is `False`, the buffer is not flushed.  This is the default and should almost always be your choice,
because flushing brackets the entries flushed in some extra text, so flushing all the time creates
visual clutter without adding any significant information.  If `now` is `True`, the buffer is
flushed with the default "before" and "after" messages.  If `now` is a  non-empty string, the buffer
is flushed with that string as its "after" message.


#### <code>pre(key, text, src=None, style=None, now=False)</code> ####

if the `key` matches an active pattern, wraps the text in a `<pre>` element, rather than just
writing it out "as is", so the line ends are honored.  No other processing of the text is done.
The optional `src` argument is the caller, as it is for `dbg`.

#### <code>err(textOrError, src=None)</code> ####

wraps the text (or the error's message) in a `<pre>` and formats it with a style recognizably
different from debugging output.  This is intended for writing out error messages and tracebacks and
the like, which is why the text is wrapped in the `<pre>`.  If the argument is an `Exception`, it is
raised.  Otherwise the call simply returns.  This enables you to capture the error information in
the log file without special handling. Calling "`dbgmgr.err(SurpriseError('Gosh!'))`" will look to
your application as if you had executed "`raise SurpriseError('Gosh!')" at the same point in the
code.

The optional `src` argument is the caller, as it is for `dbg`.

#### <code>warn(text, src=None)</code> ####

writes the text, as is, as the body of a message, with a CSS style that clearly identifies it as
neither an error nor a debugging message.

The optional `src` argument is the caller, as it is for `dbg`.

#### <code>flush(before="", after="", asis=False)</code> {#flush}

flushes buffer into the output stream.  The `before` text is written before any messages are
flushed, and the `after` text is written at the end.  If `asis` is `True`, no processing of any kind
is done on `before` or `after`.  If it is `False`, both are wrapped in `<p>` element with a distinct
style.  An "`<hr>`" is appended to clearly mark the flush's end.  

As another side effect, the message buffer list is emptied.

#### <code>close(before="", after="", asis=False)</code> {#close}

calls `flush(before,after,asis)` to make sure all the buffered messages get written out and then
closes the output stream.

### Methods mostly for debugging convenience ###

Each of these last five methods is a short "one-liner" involving a visible field of the
`DbgMgr`, but I don't want to make guarantees about those field names and their types, so in my
own work, I have avoided the temptation to work directly with the fields.  I do want to
guarantee that the API will remain stable, so I use it, if only to keep the pressure on myself.

#### <code>pattern_iterator()</code> ####

returns an iterator that traverses the set of key patterns in lexicographic order.

#### <code>buffer_iterator()</code> ####

returns an iterator that traverses the current list of buffered messages.

#### <code>pattern_count()</code> ####

returns the number of patterns currently alive.  This is a count of patterns, not keys! Patterns
containing "`*`", including the universal match, `"*"`, each count as one pattern.

#### <code>msg_count()</code> ####

returns the total number of messages generated so far, as opposed to the current buffer count.

#### <code>buffer_count()</code> ####

returns the number of messages currently buffered.

""" #</md>

@OneOnly
class DbgMgr:
   def __init__(self):
      self.buffer = []
      self.count = 0
      self.highpriority = WildCardLookup()
      self.keypatterns = WildCardLookup()
      self.message_styles = {
         "error_msg": """{color: #ff0000; font-weight: bold; background-color: #F0D0D0; 
                   border: 1px solid red; margin-left: 1em;}""",
         "priority_msg": """{color: #007020; font-weight: bold; background-color: #E1FDC8;
                   border: 1px solid #007020; margin-left: 1em;}""", 
         "ordinary_msg": """{color: #000000; background-color: #DDDDDD; 
                   border: 1px solid black; margin-left: 1em;}""", 
         "warning_msg": """{color: #0000ff; font-weight: bold; background-color: #C8E5F8;
                   border: 1px solid blue; margin-left: 1em;}""", 
         "flush_before_after":  "{color: #000000;}", 
         "msg_source": "{color: #000000; font-style: oblique}"
      }
      self._path = None
      self._sortby = None
      self._stream = None
      self._head = None
      self._head_started = False
      self._head_is_open = False
      self._something_written = False
      self._bail_on_warning = False

   def get_path(self):
      return self._path

   def set_path(self, logdirpath):
      if self._path is None:
         abspath = self._normalizeThePath(logdirpath)
         if not os.path.exists(abspath):
            os.makedirs(abspath)
         elif not os.path.isdir(abspath):
            msg = "'{0}' exists, but is not a directory".format(abspath)
            raise NotADirectoryError(msg)
         self._path = os.path.join(abspath, "dbg"+su.now4FileName()+".html")
      elif logdirpath is None:
         self.stream = None # flushes and closes the stream
         self._path = None
      else:
         raise RuntimeError("DbgMgr already opened '{}'".format(self._path))

   def _normalizeThePath(self, path):
      rootpath = os.getcwd()
      if path:
         if os.path.isabs(path):         
            raw = path
         elif path.startswith("./") or path.startswith("../") or path.startswith("~/"):
            raw = path # implied absolute paths: "here" and "home"                 
         else:
            raw =  os.path.join(rootpath, path)
      else:
         raw = os.path.join(rootpath, "log")
      return os.path.abspath(raw) # gets rid of pesky dots, double dots and tildes

   def del_path(self):
      raise RuntimeError("Cannot remove the path attribute")

   def get_sortby(self):
      return self._sortby

   def set_sortby(self, new_value):
      new_value = new_value.lower()
      if new_value in ["key", "match", "source", "time"]:
         self._sortby = new_value
      elif new_value is None:
         self._sortby = "time"
      else:
         raise ValueError("Unrecognized sort type: '{}'".format(new_value))

   def del_sortby(self):
      raise RuntimeError("Cannot remove the sortby attribute")

   def get_stream(self):
      return stderr if self._stream is None else self._stream

   def set_stream(self, astream):
      if self._stream is None:
         self.dbg("dbg", "initializing stream: {}".format(astream))
         self._stream = astream
      else:
         self.dbg("dbg", "resetting stream to None")
         if astream in [stdout, stderr, None]:
            if self._stream in [stdout, stderr]:
               if astream != self._stream:
                  self.flush()
                  self._stream = astream
               # else: no change: output is already going to "astream"
            else:
               # closing the current output file flushes the buffer
               self.close()
               self._stream = astream
         else:
            raise RuntimeError("Output stream is already opened")

   def del_stream(self):
      raise RuntimeError("Cannot remove the stream attribute")

   path   = property(get_path, set_path, del_path)
   sortby = property(get_sortby, set_sortby, del_sortby)
   stream = property(get_stream, set_stream, del_stream)

   def mycallersname(self): 
      return inspect.currentframe().f_back.f_back.f_code.co_name

   def prepare_patterns(self, patterns):
      as_blist = blist(patterns)
      su.flatten(as_blist)
      extras = []
      for n in range(0, len(as_blist)):
         entry_n = as_blist[n]
         if ',' in entry_n:            
            actual_entries = [s.strip() for s in entry_n.split(',')]
            as_blist[n] = actual_entries[0] # replace the comma list with its first entry
            extras += actual_entries[1:]    # do NOT change the size of as_blist
         else:
            as_blist[n] = entry_n.strip()
      as_blist += extras
      as_blist.sort()
      return as_blist

   def addstyleclass(self, name, spec):
      # I try to keep all the style classes together in the head of the document, so I buffer them
      # until the first flush.  Once they are written, I write a new <style> element for each new
      # class.  I do insist that a class be declared only once or with the same spec each time. 
      #
      # The reason for having this call is to allow one to create new message types easily, not to
      # encourage your artistic genius.  Simple classes only, please!
      if name.startswith("."): name = name[1:]
      if name in self.message_styles:
         if spec != self.message_styles[name]:
            raise ValueError("Debugging style class '"+name+"' mulitply declared.")
      else:
         self.message_styles[name] = spec
         if self._head_started:
            as_html = "<style type=\"text/css\">.{0} {1}</style>\n".format(name, spec)
            if self._head_is_open:
               self._head += as_html
            else:
               self.stream.write(as_html)

   def __enter__(self):
      return self

   def __exit__(self, exc_type, exc_value, exc_tb):
      if exc_type:
         tb = io.StringIO()
         traceback.print_tb(exc_tb, limit=10, file=tb)
         self.err("{0}: {1}\n{2}".format(exc_type, exc_value, tb.getvalue()))
      self.close()
   
   def __contains__(self, name):
      return name in self.keypatterns

   def __getitem__(self, what):
      if type(what) is int:
         return self.buffer[what]
      elif type(what) is str:
         whatMatcher = WildCardLookup(what)
         return [self.buffer[x] for x in self.buffer if self.buffer[x].key in whatMatcher]
      if type(what) is slice:
         what = su.slice2range(what, max=len(self.buffer))
      if type(what) is range:
         return [self.buffer[x] for x in what]
      else:
         msg = "{0} cannot be used to index {1}"
         raise TypeError(msg.format(su.a_classname(what), su.a_classname(self)))

   def __iter__(self): return self.keypatterns.__iter__()

   def pattern_iterator(self): return self.keypatterns.__iter__()
   def buffer_iterator(self): return self.buffer.__iter__()

   def pattern_count(self): return len(self.keypatterns)
   def msg_count(self): return self.count - 1 # message numbering starts at 1
   def buffer_count(self): return len(self.buffer)

   def _open(self, logdirpath):
      if self.path:
         return self
      if self.stream in [stdout, stderr]: 
         self.stream = None
      elif self.stream:
         self.stream.close()
         self.stream = None
      self.path = logdirpath 
      return self._start_the_head()

   def _start_the_head(self):
      headlines = [
         '<!DOCTYPE html>'
         '<html>'
         '<head>'
         '<meta charset="utf-8">',
         '<style type="text/css">'
         ]
      self._head_started = True
      self._head_is_open = True
      lines = [
      "."+name+" "+self.message_styles[name] for name in self.message_styles
      ]
      lines.sort() # NB. sort does NOT return "self"
      headlines += lines
      headlines.append('</style>\n')
      self._head = "\n".join(headlines)
      return self

   def add_patterns(self, *new_patterns):
      for pattern in self.prepare_patterns(new_patterns):
         if len(pattern) > 0:
            if pattern[0] == '+':
               pattern = pattern[1:]
               self.highpriority.add(pattern)
            self.keypatterns.add(pattern)

   def remove_patterns(self, *dead_patterns):
      for pattern in self.prepare_patterns(dead_patterns):
         self.keypatterns.remove(pattern)
         self.highpriority.remove(pattern)

   def raise_priority(self, *ptns):
      for ptn in self.prepare_patterns(ptns):
         self.keypatterns.add(ptn)
         self.highpriority.add(ptn)

   def lower_priority(self, *ptns):
      for ptn in self.prepare_patterns(ptns):
         self.highpriority.remove(ptn)

   def all_matched(self, *keys):
      return self.keypatterns.all_matched(self.prepare_patterns(keys))

   def any_matched(self, *keys):
      return self.keypatterns.any_matched(self.prepare_patterns(keys))

   def buffer_message(self, parms):
      self.count += 1
      parms["index"] = self.count
      self.buffer.append(DbgMessage(parms))

   def dbg(self, key, text, *, src=None, style=None, now=False):
      if (key in self.keypatterns) or not key:
         parms =  {}
         parms["key"] = key or ""
         parms["weakest_match"] = self.keypatterns.weakestPatternFor(key)
         parms["caller"] = self.mycallersname() if src is None else src
         parms["display_priority"] = 3
         if style: parms["style_class"] = style
         elif key in self.highpriority:  parms["style_class"] = "priority_msg"
         else: parms["style_class"] = "ordinary_msg"
         parms["body"] = text
         self.buffer_message(parms)
         if now: 
            if isinstance(now, str): self.flush(after=now)
            else: self.flush()
      # else key is not active, so I do nothing

   def err(self, text_or_err, src=None, bail_out=True):
      parms =  {}
      parms["caller"] =  self.mycallersname() if src is None else src
      parms["body"] = "<pre>"+str(text_or_err)+"</pre>"
      parms["display_priority"] = 1   # in English: "first priority!"
      parms["style_class"] = "error_msg"
      self.buffer_message(parms)
      if bail_out:
         if isinstance(text_or_err, Exception):
            raise text_or_err
         else:
            raise RuntimeError(text_or_err)

   def pre(self, key, text, *, src=None, style=None, now=False):
      if (key in self.keypatterns) or not key:
         if not src:
            src = self.mycallersname()
         self.dbg(key, "<pre>" + text + "</pre>", src=src, style=style, now=now)

   def warn(self, text_or_err, src=None, bail_out = False):
      parms =  {}
      parms["caller"] =  self.mycallersname() if src is None else src
      parms["body"] = "<pre>"+str(text_or_err)+"</pre>"
      parms["display_priority"] = 2   # second priority: after errors
      parms["style_class"] = "warning_msg"
      self.buffer_message(parms)
      if (bail_out or self._bail_on_warning):
         if isinstance(text_or_err, Exception):
            raise text_or_err
         else:
            raise RuntimeError(text_or_err)

   def flush(self, before="", after="", asis=False):
      self.dbg("dbg", "flush() called by {}".format(self.mycallersname()))
      if self.buffer_count() is 0 and len(before) is 0 and len(after) is 0:
         return 
      if not self._head_started:
         self._start_the_head()
      if self._head_is_open: # first time switch: close the head and open the body
         self.stream = open(self.path, mode='x')
         self.stream.write(self._head)
         self.stream.write('</head>\n<body>\n<code>\n')
         self._head_is_open = False
      if self.sortby is not "time":
         self.buffer.sort()
      if len(before) > 0:
         if asis:
            self.stream.write(before)
         else:
            self.stream.write('<p class="flush_before_after">{0}</p>\n'.format(before))
      self.dbg("dbg", "flushing buffer to {}".format(self.stream))
      for entry in self.buffer:
         self.stream.write(str(entry))
      if len(after) > 0:
         if asis:
            self.stream.write(after)
         else:
            self.stream.write('<p class="flush_before_after">{0}</p>\n'.format(after))
      self.stream.write("<hr>\n")
      self.buffer = []
      self._something_written = True

   def close(self, before="", after="", asis=False):
      self.flush(before, after, asis)
      if self._something_written:
         msg = "<p>Log ended, {1}: {0} entries</p>\n".format(self.count, time.asctime())
         self.stream.write(msg)
         self.stream.write('</code>\n</body>\n')
         if self._stream not in [stdout, stderr, None]:
            self._stream.close()
         elif self._stream is not None:
            self._stream.flush() # dump the stream's buffer (ours is empty!!!)
         self._stream = None
