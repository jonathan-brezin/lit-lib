""" <head> 
Title: Random Matrix and Vector Generation
Author: Jonathan Brezin
Date: May, 2016
Show source: yes
""" # </head>

import cmdlineparser as clp
import math
import numpy as np
import nputils as npu
import os
import random as rndm
import sysutils as su

""" <md>

## Overview: the class <code>RandomDist</code> ##

`RandomDist` is intended  to simplify using the command line to generate various kinds of random
sequences and matrices. It works by using some simple wrappers around the Python standard
library module [`random.py`](https://docs.python.org/3/library/random.html).

#### The constructor <code>RandomDist(options)</code>

The argument, `options`, may have its keys either as attributes or as keys accessible using  the
`[]` operator.  The values will be looked up first as an attribute, and failing that, as key, so
that the options can be supplied in whichever way is convenient.

The constructor assigns to the field "`dist`" a zero-argument function which wraps an iterator
for a random sequence of the desired type as specified in the options.  The attributes for
`options` relevant to the probability distributions, together with their default values, are:

<blockquote><table border="1">

<tr><td>`dist`&nbsp;&nbsp;&nbsp;</td><td>  probability distribution to use: either a 
zero-argument function or one
of the  strings {`"uniform"`, `"triangular"`, `"exponential"`, `"gaussian"`, `"logNormal"`,
`"normal"`}. The default is `"uniform"`.</td></tr>

<tr><td>`int`&nbsp;&nbsp;&nbsp;</td><td> if `True`, then random integer values only; the 
default is `False`.</td></tr>

<tr><td>`lambd`&nbsp;&nbsp;&nbsp;</td><td> used by the exponential distribution: it is 
1/(the mean) and defaults to `1.0`. Why 'lambd' and not 'lambda'? Because 'lambda' is a Python
reserved word.</td></tr>

<tr><td>`max`&nbsp;&nbsp;&nbsp;</td><td> upper bound on values for those distributions where
this is relevant. The default is `32767`--that is, small enough that a 16-bit int can be used
for the value, should they be integers only.</td></tr>

<tr><td>`min`&nbsp;&nbsp;&nbsp;</td><td> lower bound on values for those distributions where
this is relevant.  As for `max`, the default, `-32767`, is set to allow 16-bit ints to hold the
values.</td></tr>

<tr><td>`mode`&nbsp;&nbsp;&nbsp;</td><td>for the triangular distribution only: its mode,
default: `None`.</td></tr>

<tr><td>`mu`&nbsp;&nbsp;&nbsp;</td><td> mean for the normal distribution and its relatives, the
default being `0.0`.</td></tr>

<tr><td>`sigma`&nbsp;&nbsp;&nbsp;</td><td> standard deviation for the normal distribution and
its relatives, the default  being `1.0`</td></tr>

</table></blockquote>

The attributes relevant to NumPy matrix and Python list creation are:

<blockquote><table border="1">

<tr><td>`dtype`&nbsp;&nbsp;&nbsp;</td><td> the name or the type, in the sense of NumPy numeric
types, of the value desired.  It is `float` by default, which gets you 64-bit floats.  See the
[`nputils` module](nputils.html).</td></tr>

<tr><td>`pct`&nbsp;&nbsp;&nbsp;</td><td> when sparse arrays are desired, what percentage of
the array (or vector) to fill.  The default is to fill the whole matrix.  You must specify a
percentage if you want less than that.</td></tr>

<tr><td>`shape`&nbsp;&nbsp;&nbsp;</td><td> for arrays, either an `int` `tuple` `(rrr,ccc)` or a
string of the form `"rrr,ccc"` in which `rrr` and `ccc` are the number of rows and columns,
respectively; and for vectors either an `int`, an `int` `tuple` with one entry, or a string that
is the dimension of the vector. No blanks are allowed in the `rrr,ccc` value when passing it in
as a command-line string parameter value.  There is no reasonable default.</td></tr>

<tr><td>`path`&nbsp;&nbsp;&nbsp;</td><td> locates a directory in which to save the any matrices
that get generated, should "save" be requested.  The default is the current working directory,
`"."`.</td></tr>

<tr><td>`save`&nbsp;&nbsp;&nbsp;</td><td>  By default, any generated matrices are simply
returned to the caller.  If `save is specified, its value should be one of `"csv"`, `"npy"`,
`"npz"` or `"txt"`.   `"npy"` and`"npz" `use NumPy's 
[`save` and `savez` methods](docs.scipy.org/doc/numpy/reference/routines.io.html).
See [`nputils`](nputils.html#matrix-file-io) for the file-naming conventions and for the
`write...` methods used to save `"csv"` and `"txt"` files.

Saving to an `".npz"` file uses NumPy's default field names: `"arr0`", `"arr1`"`, and so on.

</td></tr>

</table></blockquote>

Finally, the inevitable [debugging keys](dbg.html):

<blockquote><table border="1">

<tr><td>`dbg`&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td> a comma-separated list of keys to
filter debugging output.  The default is no output.</td></tr>

</table></blockquote>

""" # </md>

_DEFAULTS = {
   'dbg':    "",       # usual debugging output comma-separated list of keys
   'dist':  'uniform', # see https://docs.python.org/3.4/library/random.html for others
   'dtype':  np.float, # NumPy numeric type: see the NumPy.matrix documentation
   'int':    False,    # wants integer values only?
   'lambd':  1.0,      # in case dist is "exponential"
   'max':    32767,    # bound on the value of an individual entry that fits in 16 bits
   'mode':   None,     # for the triangular distribution: no obvious default
   'min':   -32767,    # lower bound on the value of an individual entry
   'mu':     0.0,      # the mean for the normal-like distributions
   'path':   '.',      # locates a directory where any generated files are stored
   'pct':    100.0,    # for random matrices: what percentage of the entries to fill in
   'save':   None,     # the extension to use for the generated file if any.
                       # The default is not to save the matrix at all.
   'sigma':  1.0,      # standard deviation for the normal-like distributions,
   'shape':  None,     # the shape to use for NumPy matrices
}

_DISTRIBUTIONS = { # I wrap some of the "random" module's distributions
   'uniform':     lambda options: lambda: rndm.uniform(options.min, options.max),
   'triangular':  lambda options: lambda: rndm.triangular(options.min, options.max, options.mode),
   'exponential': lambda options: lambda: rndm.expovariate(options.lambd),
   'gaussian':    lambda options: lambda: rndm.gauss(options.mu, options.sigma),
   'logNormal':   lambda options: lambda: rndm.lognormvariate(options.mu, options.sigma),
   'normal':      lambda options: lambda: rndm.normalvariate(options.mu, options.sigma)
}

_PARAMETERS = { # maps distribution names to what parameters they depend on
   'uniform':     ("min", "max"),
   'triangular':  ("min", "max", "mode"),
   'exponential': ("lambd",),
   'gaussian':    ("mu", "sigma"),
   'logNormal':   ("mu", "sigma"),
   'normal':      ("mu", "sigma")
} 

class RandomDist:

   def __init__(self, options):
      for attr in _DEFAULTS: 
         # make sure that self has all possible attributes with some value
         self.__setattr__(attr, su.getvalue(options, attr, _DEFAULTS[attr]))
      if self.dist in _PARAMETERS: 
         parms = _PARAMETERS[self.dist]
         distDescription = "" # strictly for debugging
         for parm in parms:
            value = su.getvalue(options, parm, _DEFAULTS[parm])
            distDescription += "{} = {},". format(parm, value)
         distDescription = self.dist+"(" + distDescription[0:-1] +")"
         self.__str__  = lambda: distDescription
         floatDist = _DISTRIBUTIONS[self.dist](self)
         intOnly   = su.getvalue(options, "int", _DEFAULTS["int"])
         self.dist = lambda: math.floor(floatDist()) if intOnly else floatDist()
      else:
         msg = "'{0}' is not a recognized distribution name."
         raise AttributeError(msg.format(self.dist))
      # Set and vet self.shape: on entry it is either None, a string, a tuple, or an int 
      if self.shape is not None:
         if isinstance(self.shape, str): 
            parts = tuple([int(part) for part in self.shape.split(',')])
         elif isinstance(self.shape, int):
            self.shape = (self.shape,)
         elif not isinstance(self.shape, tuple):
            msg = "Expected a str, tuple, or int, but got {0}"
            raise TypeError(msg.format(su.a_classname(self.shape)))
      self.dtype = npu.numpytype(self.dtype)
      self.generated = ([],[]) if self.save == 'npz' else None

""" <md>

### Command line support ###

#### <code>setCmdLineArgs(cmdlineparser)</code> and <code>fromCmdLine()</code> ####

These are the usual two methods expected by `cmdlineparser.parse_args()`.

""" # </md>

   def setCmdLineArgs(parser):
      defaults = _DEFAULTS
      parser.add_a_flag('-int',   'random integer values only')
      parser.add_a_str('-dbg',     defaults['dbg'],   'turn on debugging output')
      parser.add_a_str('-dist',    defaults['dist'],  'probability distribution to use')
      parser.add_a_str('-dtype',   defaults['dtype'], 'NumPy type name for the entries')
      parser.add_a_str('-shape',   defaults['shape'], 'rowsxcols,... string')
      parser.add_a_float('-lambd', defaults['lambd'], 'for the exponential distribution')
      parser.add_a_float('-max',   defaults['max'],   'upper bound on entries')
      parser.add_a_float('-min',   defaults['min'],   'lower bound on entries')
      parser.add_a_float('-mode',  defaults['mode'],  'mode for triangular distribution')
      parser.add_a_float('-mu',    defaults['mu'],    'mean for normal distribution')
      parser.add_a_float('-pct',   defaults['pct'],   'percentage of entries to fill in')
      parser.add_a_float('-sigma', defaults['sigma'], 'std. dev. for the normal distribution')

   def fromCmdLine():
      args = clp.parse_args(RandomDist, usage="generate sets of random values")
      return RandomDist(args)

""" <md>

### Vector and list computations ###

#### <code>list(size)</code> ####

returns a random `list` whose size is `size` using `self`'s distribution.  You may pass an
integer literal string, an `int` or an `int` 1-`tuple` as the argument value..

#### <code>vector(size)</code>\
<code>unit_vector(size)</code> ####

Both return a `numpy` "`ndarray`" whose dimension is `size` and whose values are distributed
according to `self`'s distribution.  The unit vector case returns  a vector with Euclidean
norm 1.

""" # </md>

   def _size2tuple(size):
      the_tuple = npu.to_shape(size)
      if len(the_tuple) == 1: 
         return the_tuple
      else:
         raise ValueError("Expected an integer 1-tuple, but got {}.".format(the_tuple))

   def list(self, size):
      return [self.dist() for n in range(0, RandomDist._size2tuple(size)[0])]

   def vector(self, size, path=None, ext="npy"):
      vector = np.zeros(RandomDist._size2tuple(size), dtype=self.dtype)
      for n in range(0,len(vector)): vector[n] = self.dist()
      if path != None:
         npu.writearray(path, vector, ext)
      return vector

   def unit_vector(self, shape_info, path=None, ext="npy"):
      shape = npu.to_shape(shape_info)
      vector = np.zeros(shape)
      norm_squared = 0.0
      flat = vector.reshape((npu.sizefromshape(shape),))
      for n in range(0, vector.size):
         vector[n] = x = self.dist()
         norm_squared += x*x
      vector /= math.sqrt(norm_squared)
      if path != None:
         npu.writearray(path, vector, ext)
      return vector


""" <md>

### Matrix output formats ###

#### <code>sparse_array(shape, pct, tgt)</code> #### 

creates a matrix only a (small) percentage of whose values are non-zero.  The keyword `pct` is
that percentage.  Be careful: percentage really means "percentage", not "fraction".  The default
value for the percentage is `self.pct`, and the default for `self.pct` is `100.0`.  The keyword
argument `shape` is the usual `numpy` shape `tuple` specification. The default is 
`self.shape`, but the latter has no reasonable default: the owner of `self` has to set it.  The
final keyword argument is `tgt`, which is a directory path for an existing directory into which
to write the matrix, once created.  The default value is `None`, and when that is the case, 
`self.tgt` will be used.  If that value is also `None`, no persistent copy of the matrix will be
made.

This naive implementation distributes the entries uniformly in the matrix.

#### <code>matrix(shape, tgt)</code> \
<code>square_matrix(self, dim, tgt)</code> #### 

fills in an entire matrix with random values.  `square_matrix` wraps `matrix` to create a square
matrix with `dim` rows and `dim` columns.  If `dim` is none, `self.shape[0]` will be used.
`matrix` uses its keyword argument `shape` for the shape tuple if it is not `None`; otherwise, it
uses `self.shape`.  `tgt has the same meaning here as for `sparse_array`.

#### <code>diagonally_dominant_matrix(self, dim, pct, tgt)</code> #### 

creates a (possibly) sparse square matrix with non-negative entries whose off-diagonal entries
are bounded above by the diagonal entries in their row and column.  The keyword arguments all 
have the same meanings as in the 3 method signatures above.

""" # </md>

   def randomindex(shape):
      return tuple((rndm.randrange(0, n) for n in shape))

   def sparse_array(self, shape=None, pct=None, path=None, ext="npy"):
      if shape is None: shape = self.shape
      if pct is None: pct = self.pct
      entriesToFill = math.floor((npu.sizefromshape(shape)*pct)/100.0)
      array = np.zeros(shape, dtype=self.dtype)
      for n in range(0, entriesToFill):
         index = randomindex(shape)
         while array[index] != 0:
            index = randomindex(shape)
         newvalue = self.dist()
         while value == 0:
            newvalue = self.dist()
         array[index] = newvalue
      if path != None: npu.writearray(path, array, ext)
      return array

   def matrix(self, shape = None, path=None, ext="npy"):
      if shape is None: shape = self.shape
      matrix = np.zeros(shape, dtype=self.dtype)
      (rows, columns) = shape   
      for i in range(0,rows):
         for j in range(0, columns): matrix[i,j] = self.dist()
      if path != None: npu.writearray(path, matrix, ext)
      return matrix

   def square_matrix(self, dim=None, path=None, ext="npy"):
      shape = (dim, dim) if dim != None else self.shape
      return self.matrix(shape, path, ext)

   def diagonally_dominant_matrix(self, dim=None, pct=None, path=None, ext="npy"):
      shape = (dim, dim) if dim != None else self.shape
      matrix = np.zeros(shape, dtype=self.dtype)
      diagonal = np.zeros(dim, dtype=self.dtype)
      if pct is None: pct = self.pct
      entriesToFill = math.floor((dim*dim*pct)/100.0) - dim
      for n in range(0,dim):
         while diagonal[n] == 0: matrix[n,n] = diagonal[n] = self.dist()
      for n in range(0, entriesToFill):
         i = rndm.randrange(0,dim); j = rndm.randrange(0,dim)
         while matrix[i,j] == 0:
            i = rndm.randrange(0,dim); j = rndm.randrange(0,dim)
         maxAllowed = 1 + min(diagonal[i], diagonal[j]) # m[i,j] in range(1, maxAllowed) ...
         matrix[i,j] = self.dist() % maxAllowed         #     note the "mod" operation here
         while matrix[i,j] == 0:                        #     and we don't want 0's
            matrix[i,j] = self.dist() % maxAllowed
      if path != None: npu.writearray(path, matrix, ext)
      return matrix
      
