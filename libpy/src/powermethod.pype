#! /usr/bin/env python

""" <head> 
Title: The Power Method Largest Eignenvalue Computation
Author: Jonathan Brezin
Date: April, 2017
Show source: yes
""" # </head>

""" <md>

## Overview ##

Instances of the `PowerMethod` class apply the power method eigenvalue computation in the special
case where one knows an initial vector that is all but certain not to get one into trouble. Only
the largest eigenvalue, together with a length 1 eigenvector, is computed.  For convenience, a
call to NumPy's version of the QR algorithm is also provided, but that is mainly intended to
debug this code, as NumPy's QR interface, especially with a little help from my [`nputils`
module](nputils.html#reading_csv) for slightly more flexible input, is easy to use.

""" # </md>

import cmdlineparser as clp
import dbg
import math
import numpy as np
import nputils as npu
from randomdist import RandomDist
import re
import sys
import sysutils as su
import time

""" <md>

## The <code>PowerMethodResult</code> class ##

An instance of the `PowerMethodResult` class holds all of the information about the result of
applying the power method.

#### The constructor: <code>PowerMethodResult(progress, time)</code>

The parameters are `progress`, the `PowerMethodProgress` instance that tracked the iterations,
and `time`, the time required for the computation.  

There are two ways that the power method can fail:

> The length multiplier (the absolute value of the largest eigenvalue) can fail to converge in
the number of iterations allowed.

> The multiplier can converge, but the unit vectors produced by the final iterations may not
converge to constant multiples of one another.  This can happen when the eigenspace for the
largest eigevalue is multi-dimensional, or when there are two or more distinct eigevalues of
the same magnitude.

If the computation was successful,

> the instance's attribute "`.vector`" will be the last unit vector computed, and\
 the instance's attribute "`.eigenvalue`" will be the eigenvalue

If the computation failed, but the length multiplier computation succeeded, the instance's
attribute "`.absolute_multiplier`" will be the magnitude of the largest eigenvalue(s), and the
boolean attribute "`.converged`" will be `True`; otherwise, "`converged`" will be `False`.

The other instance attributes are

[time]: https://docs.python.org/3/library/time.html

> `.time`: the time, in the units returned by [`time.time()`][time],\
`.progress`: the [`PowerMethodProgress`](#progress) instance used to track the iterations, and\
`.iterations`: the number of iterations attempted.

####<code>to_str(entries_shown=None, perline = 10)</code>{#ev_to_str}

returns a string that contains the eigenvalue and some or all of the eigenvector's entries.  The
default is to show all of them, at 10 entries per line. If you only want `n` entries, use
`entries_shown=n`.  If you want `k` entries per line, use `perline=k`.  The failure message is
minimal.

""" # </md>

def _nearest_rotation(v, w):
   best_delta = 4.0
   best_rotation = math.nan
   for n in range(0, v.size):
      try:
         rotation = (v[n]/abs(v[n]))*(abs(w[n])/w[n])
         # print("v[n]={}, w[n]={}, rot={}".format(v[n], w[n], rotation))
         delta  = npu.supnorm(v - (rotation*w))
         if delta < best_delta:
            best_delta = delta
            best_rotation = rotation
      except:
         pass
   return (best_delta, rotation)

class PowerMethodResult:
   def __init__(self, progress, time):
      self.progress = progress
      self.iterations = len(progress.lambdas) - 1
      self.time  = time
      self.absolute_multiplier = math.nan
      self.eigenvalue = math.nan
      self.vector = None
      self.converged = (progress.delta_lambdas[-1] <= progress.pm.length_limit)
      if self.converged:
         self.absolute_multiplier = progress.lambdas[-1]
         if progress.delta_norms[-1] <= progress.pm.two_norm_limit or \
               progress.delta_sups[-1] <= progress.pm.sup_norm_limit:
            self.eigenvalue = self.absolute_multiplier
            self.vector = progress.new
         else: # not a positive eigenvalue: may be negative or complex?
            best_delta, rotation = _nearest_rotation(progress.prior, progress.new)
            if best_delta <= progress.pm.sup_norm_limit:
               self.eigenvalue = self.absolute_multiplier * rotation
               self.vector = progress.new

   def to_str(self, entries_shown=None, perline = 10):
      v = self.vector
      if v is None:
         failurefmt = "failed after {} iterations with multiplier {}"
         failure = failurefmt.format(self.iterations, self.progress.lambdas[-1])
         if not self.converged:
            return failure+" and final delta  length {}".format(self.progress.delta_lambdas[-1])
         else:
            dn = self.progress.delta_norms[-1]
            ds = self.progress.delta_sups[-1]
            return failure+" with final delta norm {} and delta sup {}".format(dn, ds)
      else:
         if entries_shown == None: entries_shown = v.size
         delta = self.progress.delta_lambdas[-1]
         entries = npu.format_array(v, displaylimit=entries_shown,perline=perline)
         msg = "Eigenvalue {} after {} iterations and delta lambda: {}\nentries:[\n{}]\n"
         return msg.format(self.eigenvalue, self.iterations, delta, entries)

   def __str__(self):
      return self.to_str(perline = 10)

""" <md>

## The <code>PowerMethodResults</code> class ##

#### The constructor <code>PowerMethodResults(matrix, matrixinit_time=0.0)</code>

The first argument `matrix` is the input whose eigenvalues we want to compute, and the next is the
time required either to read it from storage or to generate it from scratch.  If not provided, it
will be taken to be `0,0`--that is, I'll assume you don't care and want it added in to the total
time. There are five attributes representing eigenvectors what we might compute.  Only one,
`left`, is always computed:

<blockquote>

----------------- ------- -------------------------------------------------------------
`left`            &nbsp;  the `PowerMethodResult` for the largest left eigenvalue.
`right`           &nbsp;  the `PowerMethodResult` for the largest right eigenvalue.
&nbsp;       
`qr_eigenvalues`  &nbsp;  an `ndarray` of all of the eigenvalues.
`qr_eigenvectors` &nbsp;  the corresponding array of the eigenvectors as `ndarray`s.
`qr_time`         &nbsp;  the elapsed time, if any, for the QR computation.
----------------- ------- -------------------------------------------------------------

</blockquote>

""" # </md>

class PowerMethodResults:
   def __init__(self, options, path, matrix):
      if not isinstance(matrix, np.ndarray):
         matrix, column_headings, row_headings = npu.readarray(path, options)
         #print("matrix has type {} and is\n{}".format(type(matrix), matrix))
      if (len(matrix.shape) != 2) or (matrix.shape[0] != matrix.shape[1]):
         msg = "Expected a square matrix, but got shape {}".format(matrix.shape)
         raise ValueError(msg)
      self.matrix          = matrix
      self.rows            = matrix.shape[0]
      self.left            = None 
      self.right           = None
      self.qr_eigenvalues  = None 
      self.qr_eigenvectors = None
      self.time2init       = 0.0
      self.qr_time         = 0.0 # elapsed time, if any, spent in QR

   def powermethod_time(self):
      gettime = lambda ev: ev.time if ev != None else 0.0
      return gettime(self.left)  +  gettime(self.right)

   def total_time(self):
      return self.time2init + self.qr_time + self.powermethod_time()

   def to_str(self, entries_shown=None, perline = 10, timeunit=3):
      if self.left == None: firstleft = ""
      else: firstleft = "First left: "+self.left.to_str(entries_shown, perline)
      if self.right == None: firstright = ""
      else: firstright = "First right: "+self.right.to_str(entries_shown, perline)
      if isinstance(self.qr_eigenvalues, type(None)): qr_eigenvalues = ""
      else: 
         qr_eigenvalues = "QR eigenvalues: " + \
            npu.format_array(self.qr_eigenvalues, displaylimit=entries_shown, perline=perline)
      powertime = su.time2IntLiteral(self.powermethod_time(), placesToSave=timeunit)
      totaltime = su.time2IntLiteral(self.total_time(), placesToSave=timeunit)
      unit = su.time_units(timeunit)
      times = "\nPower time: {} {}, total time: {} {}\n".format(
         powertime, unit, totaltime, unit
      )
      return "{}\n{}\n{}\n{}\n".format(firstleft, firstright, qr_eigenvalues, times)

   def __str__(self):
      return self.to_str()


""" <md>

## The <code>PowerMethodProgress</code> class {#progress}

#### <code>check(new_vector)</code> {#check}

The power method drives an initial guess for an eigenvector toward a final answer. If the
problem has a unique solution, and the current iteration drives the prior vector to
`new_vector`, then, if we are at all close to success, these two vectors will be close to
collinear-- _i.e._ `new_vector` is essentially equal to &lambda;&ast;`prior` for some (complex)
constant &lambda;.  This method computes a reasonable approximation to &lambda; in a two step
process.

1) The first step computes the absolute value, &verbar;&lambda;&verbar;, of &lambda; as the
quotient of the 2-norms, &Vert;`new_vector`&Vert;<sub>2</sub>`/`&Vert;`prior`&Vert;<sub>2</sub>.

2) The second step computes a complex value &phi; of absolute value `1` that I'll call the
"phase shift", which would yield
`new_vector=`&verbar;&lambda;&verbar;&ast;&phi;&ast;`prior` if `new_vector` really were an
eigenvector with eigenvalue &lambda; = &verbar;&lambda;&verbar;&ast;&phi;.  In practice,
the simplest approach is to look at each of the coordinate ratios &phi;<sub>n</sub>
=`new_vector`<sub>n</sub>`/prior`<sub>n</sub> and choose the one that minimizes the sup-norm
&Vert;`new_vector - ` &verbar;&lambda;&verbar;&ast;&phi;<sub>n</sub>&ast;`prior`&Vert;<sub>&infin;</sub>.

The sup-norm of the difference provides a check for the case when the absolute value
&verbar;&lambda;&verbar; does not uniquely determine &lambda; (and hence also &phi;). Consider a
linear transformation `T` with orthogonal eigenvectors `Tv=v` and `Tw=-w` having eigenvalues 1
and -1:

> If `prior` in the discussion above happens to be `v+w`, and if we use `v` and `w` as our basis
vectors, then &verbar;&lambda;&verbar; is `1`, because both  `prior=(1,1)` and
`T*prior=v-w=(1,-1)` have length &radic;`2`.  My strategy for computing &phi; in this example
uses the first coordinate of the two vectors, and yields &phi; `=` &phi;<sub>0</sub> `= 1`.  The
sup-norm of the difference between the normalized unit vector `prior/`&radic;`2` and its image
under `T` is the difference between their second coordinates, which is `2/` &radic;`2 = `
&radic;`2`. That is far from '0', which is what we want.

It is important to remember that the power method is _not_ designed to give sensible answers for
random linear operators.  That is why the instances of `PowerMethodProgress` should track
information from the whole set of iterations.  If the process fails to converge, one can easily
review the progress, or lack thereof, at each iteration.  The instance attributes are:

<blockquote>

----------------- ------- -------------------------------------------------------------
`pm`              &nbsp;  the `PowerMethod` instance doing the iteration
`size`            &nbsp;  the dimension of the vector space = the size of the vector
`shape`           &nbsp;  the initial shape of the vector (as a NumPy `ndarray`)
&nbsp;            &nbsp;
`prior`           &nbsp;  the previous iteration's result, normalized to length 1
`new`             &nbsp;  the current iterations's result, normalized to length 1
&nbsp;            &nbsp;
`lambdas`         &nbsp;  the lengths of the sequence of `T*prior`s
`delta_lambdas`   &nbsp;  the absolute value of the relative change in lambda
`delta_sups`      &nbsp;  the sup-norm of `prior-new` at each iteration
`delta_norms`     &nbsp;  the 2-norm of `prior-new` at each iteration
----------------- ------- -------------------------------------------------------------

</blockquote>

In a successful application, one should see the entries in `delta_lambdas` rapidly decrease to
`0`, and the tail of the `lambdas` array should be constant or (slowly) monotone increasing. 
If there is a unique largest eigenvalue and it is real, the `delta_norms` should decrease to
`0`, as should `delta_sups`.  If the lambdas converge, but the series of vectors computed this
way does not, we have to use a phase-shift, as described above, to get the correct complex
eigenvalue and eigenvector.  This will succeed if there is a one-dimensional eigenspace for the
largest eigenvalue.

""" # </md>

class PowerMethodProgress:
   def __init__(self, pm, first_vector):
      self.pm = pm
      self.size = first_vector.size
      self.shape = first_vector.shape
      self.new = first_vector.reshape((self.size,))
      self.lambdas = [npu.twonorm(self.new)]
      self.new /= self.lambdas[0]
      self.prior = None
      self.delta_lambdas = []
      self.delta_sups = []
      self.delta_norms = []

   def check(self, new_vector):
      if (self.shape != new_vector.shape):
         msg = "Wrong shape: expected={}, got={}"
         raise ValueError(msg.format(self.shape, new_vector.shape))
      self.prior = self.new
      self.new = new_vector.reshape((self.size,))
      new_lambda = npu.twonorm(self.new)
      if new_lambda < self.pm.two_norm_limit:
         msg = "New vector is too close to 0: its 2-norm: {} and sup-norm: {}"
         raise ValueError(msg.format(new_lambda, npu.supnorm(self.new)))
      self.new /= new_lambda    
      relative_delta = abs((self.lambdas[-1]-new_lambda)/new_lambda)
      self.lambdas.append(new_lambda)
      self.delta_lambdas.append(relative_delta)
      delta = self.new - self.prior
      self.delta_sups.append(npu.supnorm(delta))
      self.delta_norms.append(npu.twonorm(delta))
      if "allpow" in self.pm.dbgmgr:
         msg = "{}. progress deltas are norm: {}, sup: {}, lengths: {}"
         formatted = msg.format(
            len(self.delta_norms), self.delta_norms[-1],
            self.delta_sups[-1],self.delta_lambdas[-1]
         )
         self.pm.dbgmgr.dbg("allpow", formatted)
      return (self.delta_norms[-1], self.delta_sups[-1],self.delta_lambdas[-1])

""" <md>

## The <code>PowerMethod</code> class

#### The constructor: <code>PowerMethod(matrix, options = {})</code>

An instance holds all of the information about a particular execution of the power method for
the matrix that is its first argument.  The matrix must be a square `numpy` numeric
[`ndarray`](http://docs.scipy.org/doc/numpy-1.10.1/reference/arrays.ndarray.html).

</blockquote>

The `options` parameter is a `dict` include both parameters for each type of computation--e.g.
how many iterations to allow--and flags for what computations are to be done--e.g. whether to do
both left and right multiplications if the matrix may be non-symmetric. The first group of
options are booleans that are `False` by default:

<blockquote>

------ --- ---------------------------------------------------------------
`both`  :  compute both left and right eigenvectors for the power method
`two`   :  compute the first two largest eigenvalues, not just the first 
`all`   :  use QR to get the whole set of eigenvalues
`cmp`   :  compare the QR results with the power method results
&nbsp;      &nbsp;
`time`  :  display the time required for each part of the computation
------ --- ---------------------------------------------------------------

</blockquote>

The remaining options for the constructor are parameters for the computations.  The first three
are threshholds for stopping the iteration. They all look at the delta between the previous
vector and that  produced by the current iteration.  `iter` allows you to put a bound on the
number of iterations regardless of whether the result might improve.  
`minspan`, is a lower bound that is used only if one wants to compute a second eigenvalue. 
And just in case you want some debugging output, the option `dbg` takes as its value a
comma-separated (no spaces, please!) list of keys for the parts of the debugging output
you wish included.

Here the options all are, with their default values:

<blockquote>

-------- --- -------------------------------------------------------- -----------------
`mindrl`  :  quit when the delta's relative length is less than this   (`1.0/16384.0`) 
`mind2n`  :  quit when the delta's 2-norm is less than this            (`1.0/16384.0`)
`mindsup` :  quit when the delta's sup-norm is less than this          (`1.0/16384.0`)
`iter`    :  quit after at most this many iterations                       (`10`)
`minspan` :  minimum dot product for two unit vectors to span a plane  (`1.0/256.0`)
`dbg`     :  comma-separated list of debugging flags to turn on            (`""`)
-------- --- -------------------------------------------------------- -----------------

</blockquote>

These attributes do not have the world's best mnemonics, but I've tried to make them not too
clumsy to use as command line keys.

""" # </md>

class PowerMethod:
   def getOptionDefaults():
      return {
         'mindrl':  1.0/16384.0,   # quit when (delta length over length) is less than this
         'mind2n':  1.0/16384.0,   # quit when the 2-norm of the delta is less than this 
         'mindsup': 1.0/16384.0,   # quit when the sup-norm of the delta is less than this
         'min_v':   0.001,         # for the coordinates of the random vector
         'max_v':   0.999 ,        #    ditto

         'iter': 10,     # quit after at most this many iterations
         'size': 0,      # number of rows if we are generating a random square matrix
         'both': False,  # get both left and right eigenvectors
         'all': False,   # use QR to compute all of the eigenvalues
         'dbg': "",      # debugging keys: show debug output for these keys
      }

   def _option(self, name):
      try:
         return self.options.__getattribute__(name) 
      except:  # options' keys include all of the options which have defaults
         return self.options[name]

   def __init__(self, options={}, initial_vector=None):
      # fields constraining which computations are done and how they are done
      self.options = su.mergepairs(options, PowerMethod.getOptionDefaults(), clone=True)
      self.options['max']   = self.options['max_v']
      self.options['min']   = self.options['min_v']
      self.random_vector    = RandomDist(self.options)
      self.length_limit     = self._option("mindrl")
      self.two_norm_limit   = self._option("mind2n")
      self.sup_norm_limit   = self._option("mindsup")
      self.max_iterations   = self._option("iter")
      self.iteration_range  = range(1, 1+self.max_iterations)

      # and just in case we need to monitor things:
      self.dbgmgr = dbg.DbgMgr()
      self.dbgmgr.dbg("rd", "vector distribution is {}".format(self.random_vector.__str__()))

   def compute(self, path=None, matrix=None, initial_left=None, initial_right=None):
      start = time.time()
      results = PowerMethodResults(self.options, path, matrix)
      rows = results.rows
      results.time2init = time.time() - start
      if isinstance(initial_left, np.ndarray):
         initial_left = (1.0+0.0j)*initial_left.reshape(rows, 1)
      else:
         initial_left = (1.0+0.0j)*self.random_vector.unit_vector((rows,1))
      try:
         self.compute_largest_eigenvalue(results, initial_left)
         if self._option("both"):
            if isinstance(initial_right, np.ndarray):
               initial_right = (1.0+0.0j)*initial_right.reshape(1, rows)
            elif isinstance(initial_left, np.ndarray):
               initial_right = initial_left.copy().reshape(1, rows)
            else:
               initial_right = (1.0+0.0j)*self.random_vector.unit_vector((1, rows))
            self.compute_largest_eigenvalue(results, initial_right)
         if self._option("all"):
            self.compute_all_eigenvalues_via_qr(results)
      except Exception as exc:
         if self.dbgmgr != None:
            self.dbgmgr.err(str(exc))
            self.dbgmgr.flush()
         raise
      return results

""" <md>

#### <code>compute_largest_eigenvalue(results, initial_vector)</code> {#get_largest}

repeatedly multiplies `initial_vector` by `results.matrix` until the result stabilizes
sufficiently or the number of iterations allowed is reached. If the initial vector has shape
`(1,n)`, it is multiplied on the left by the matrix; otherwise it is multiplied on the right.
The method returns its result as an instance of `PowerMethodResult` and also leaves the result
in as the value of `results....`, where the ellipsis is filled in with `left` or `right`,
as appropriate.

If some iteration yields zero, the unit vector that got multiplied to 0 is returned as the
eigenvector, and 0 as the eigenvalue.  I anticipate that this is a rare occurence, at least in a
context where the power method legitimately applies, but for purposes of experimenting with
"random" data, one has to allow for it. Future work might be to try another initial vector in
the hopes of getting a non-zero eigenvalue, but how many tries, and how to generate the new
vector?

#### <code>compute_all_eigenvalues_via_qr(results)</code> {#get_qr}

applies NumPy's [QR code](https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.eig.html)
to the matrix and leaves its results in the `results.qr_...` fields of `results`.  This is a
very thin wrapper around numpy's call that was provided for purposes of debugging the power
method code on sizes where both power _and QR_ are fast.  If `"allqr"` and/or `"qr"` are alive
as debugging keys, the results are posted to the debugging stream.

""" # </md>

   def compute_largest_eigenvalue(self, results, initial_vector):
      matrix = results.matrix
      wants_left = (initial_vector.shape[0] > 1)
      vector     = initial_vector/np.linalg.norm(initial_vector)
      product    = (lambda m, v: np.dot(m, v)) if wants_left else (lambda m, v: np.dot(v, m))
      self.dbgmgr.dbg("pow", "Iteration over: {} for {}".format(self.iteration_range, vector))
      progress = PowerMethodProgress(self, vector)
      before = time.time()
      for n in self.iteration_range:
         new_vector = product(matrix, vector)
         delta_n, delta_s, delta_l = progress.check(new_vector)
         if (delta_n <= self.two_norm_limit or delta_s <= self.sup_norm_limit) and \
               delta_l <= self.length_limit:
            break
         else:
            vector = new_vector
      result = PowerMethodResult(progress, time.time() - before)
      if wants_left:
         results.left = result
      else:
         results.right = result
      pass_name = "Left multiplying:\n" if wants_left else "Right multiplying:\n"
      self.dbgmgr.dbg("pow", pass_name + str(result))
      return result

   def compute_all_eigenvalues_via_qr(self, results):  
      before = time.time()
      evalues, evectors = np.linalg.eig(results.matrix)
      results.qr_time = time.time() - before
      results.qr_eigenvectors = evectors
      results.qr_eigenvalues = evalues
      if not ("allqr" in self.dbgmgr or "qr" in self.dbgmgr):
         return
      # That is correct: everything from here on down is only for debugging output.
      evs = results.qr_eigenvalues
      max_index = np.argmax(abs(evs))
      evmax = abs(evs[max_index])
      min_index = np.argmin(abs(evs))
      evmin = abs(evs[min_index])
      answer = "The eigenvalue size range is [{}, {}]\n".format(evmin, evmax)
      if "allqr" in self.dbgmgr:
         answer += "Eigenvalues:\n   "+npu.format_array(evs, displaylimit=10)+"\n";\
         vctrs = results.qr_eigenvectors
         answer += "Eigenvectors:\n   "+npu.format_array(vctrs, displaylimit=10)+"\n";          
      largestEV = results.left.eigenvalue
      answer += "The relative difference between power's eignvalue and QR's is"
      answer += "{}".format(abs(largestEV - evs[max_index])/largestEV)
      powervector = results.left.vector
      qrvector = results.qr_eigenvectors[max_index]
      qrvector.shape = powervector.shape
      (diff, r) = _nearest_rotation(qrvector, powervector)
      msg = "The difference in the two eigenvectors, power's - eig's, is\n{}"
      self.dbgmgr.dbg("qr", msg.format(npu.format_array(diff, displaylimit=10)))
      normmsg = "\nThe 2 norm of this difference is {} and the sup norm is {}."
      norm = npu.twonorm(diff)
      sup  = npu.supnorm(diff)
      self.dbgmgr.dbg("qr", normmsg.format(norm, sup))

#############################################################################

""" <md>

The command line task starts here.  The syntax for the command line is

<blockquote><pre class="exampleCode">
powermethod [-sep re] [-rhdrs ?] [-chdrs ?] [-type ?] 
      [-size ?] [mindrl ?] [mind2n ?] [mindsup ?] [iter ?] 
      [-pct ?] [-dbg ?] [-eig] [-both] [-sym]
      [paths]
</pre></blockquote>

The question marks are numeric values to be supplied, `re` is a regular expression, and `path`
is, as its name suggests, the path locating a file that holds the matrix. See the
[`nputils` module](nputils.html#generic-array-file-io). The first four options are used only
by `nputils` to read a matrix from an input file.  The remaining options are explained here.

If no path is supplied, the size `n` must be specified, and an `n x n` random matrix of that
size will be used.

""" # </md>

   def setCmdLineArgs(parser):
      DEFAULTS = PowerMethod.getOptionDefaults()
      RandomDist.setCmdLineArgs(parser) # do these first so that the path positional is LAST!
      parser.add_a_flag("-all",  "use QR to get all the eignenvalues")
      parser.add_a_flag("-both", "get both left and right vectors")
      parser.add_a_flag("-eig",  "compare with NumPy eig call")
      parser.add_a_flag("-sym",  "generate a symmetric random matrix")

      parser.add_a_float("-mindrl",  DEFAULTS["mindrl"],
         "min acceptable relative length change")
      parser.add_a_float("-mind2n",  DEFAULTS["mind2n"], 
         "min acceptable 2-norm vector change") 
      parser.add_a_float("-mindsup", DEFAULTS["mindsup"],
         "min acceptable sup-norm vector change")
      parser.add_a_float("-min_m", -1023.0,
         "minimum value for random matrix entries")
      parser.add_a_float("-max_m", 1023.0,
         "maximum value for random matrix entries")
      parser.add_an_int("-iter",  DEFAULTS["iter"],
         "quit after at most this many iterations")
      parser.add_an_int("-size", DEFAULTS["size"], 
         "for random matrices, the number of rows, and integer >= 2")

      parser.add_a_str("-np_type", "int16", 
         "for random matrices, the NumPy type for an entry")

      parser.add_an_optional_list("paths", "path(s) to matrix source file(s)")

   def fromCmdLine():
      USAGE = """\
Apply the power method and, optionally, the QR method to a matrix.

The final argument in the call is a (possibly empty) list of paths.  If it is non-empty,
each will be read for a matrix to compute.  If it is empty, a random matrix will be
generated with the number of rows and columns both equal to the value the "-size"
argument.  This random matrix will be made symmetric if "-sym" is one of the arguments.

      """
      options = clp.args_dict(clp.parse_args(PowerMethod, usage=USAGE))
      #if options["dbg"] == "": options["dbg"] = "*"
      pm =  PowerMethod(options)
      paths = options["paths"]
      with dbg.initDbgMgr(low=(options["dbg"] or "")) as dbgmgr:
         if len(paths) > 0:
            for path in paths:
               results = pm.compute(path=path)
               print(str(results))
         else:
            options['max'] = options['max_m']
            options['min'] = options['min_m']
            options['dtype'] = npu.numpytype(options['np_type'])
            matrix_rd = RandomDist(options)
            size = options["size"]
            if (size < 2) or not isinstance(size, int):
               raise ValueError("The size must be an integer >= 2, not {}".format(size))
            matrix = matrix_rd.square_matrix(dim=size)
            if options["sym"]: matrix = (matrix + matrix.transpose())/2
            if size < 10:
               print("Array:\n{}\n".format(npu.format_array(matrix, perline=size)))
            results = pm.compute(matrix=matrix)
            print(results.to_str(entries_shown=100))

if __name__ == '__main__': # we are testing this code from the command line

   PowerMethod.fromCmdLine()
     