=begin <head> 
Title: Some Addtions to "File"
Author: Jonathan Brezin
Date: October, 2016
Show source: Yes
Tab Size: 3
=end 

require 'open3'
class File 
=begin <md>

### <code>split_a_path_list(string)</code> ###

The argument `string` is a list of paths, like the `PATH` environment variable.  The individual
directories and/or files are assumed to be separated by the operating-system dependent separator
character, `/` for *nix, `\\` for MS. The return value is an `Array` of the individual paths.

=end
   def self.split_a_path_list(string)
      string.split(PATH_SEPARATOR)
   end

=begin <md>
   
### <code>now4filename(extension=nil, show: :both)</code> ###

Creates a file name whose base name is the current _local_ time and whose extension is the argument
given, if that value is non-nil.  E.g. when this was written, the call 
`File.now4filename("log")` yielded `"20161025_110457.log"`--that is, roughly 11:05 on October
25, 2016

The default is to include both the time and date. You can restrict the name to include just the
date or the time by specifying `show:` `:date` or `show:` `:time` as the optional last
argument.

=end
   def self.now4filename(extension=nil, show: :both)
      name = case show
             when :both then Time.now.strftime "%y%m%d_%H%M%S"
             when :date then Time.now.strftime "%y%m%d"
             when :time then Time.now.strftime "%H%M%S"
             end
      if extension.nil?
         name 
      elsif extension[0]=='.' 
         name+extension
      else 
         name+'.'+extension
      end
   end

=begin <md>
   
### <code>assureDirectory(path, permissions=0740, all=false)</code> ### 

makes sure that `path` exists and names a directory.  If it does not exist, the directory will
be created.  If `all` is `true`, any intermediate directories needed will also be created.  If
`all` is `false`, the parent path must name an existing directory.
   
=end
   def self.assure_directory(path, permissions: '0740', all: false)
      path = expand_path path  # make sure leading "~" is translated
      if exists? path
         if not directory? path
            raise IOError.new "'#{path}' exists, but is not a directory"
         end
         return self
      end
      if permissions.is_a? Integer
         permissions = permissions.to_s 8
      end
      recurse = if all then '-p ' else '' end
      exit_status = '?'
      cmd = "mkdir -m #{permissions} #{recurse} #{path}"
      stdin, stdout_stderr, wait_thr = Open3.popen2e(cmd) 
      exit_status = wait_thr.value
      puts exit_status
      if exit_status != 0
         puts "assure_directory failed #{exit_status}: #{stdout_stderr.read}", file=STDERR
      end
   end
=begin <md>

### <code>normalized_path(parent=Dir.getwd, child: nil, alternate: nil)</code> ###

returns the absolute path one gets by starting with a "parent" path, which defaults to the
current working directory, and appending to it either (1) some conventional child base name, or
(2) a particular path that is an alternative needed for some special reason.

If `alternate` is given and is itself either absolute or has an implied parent (like `./`,
`../`, or `~/`), its normalized absolute version is returned, and the other two arguments are
simply ignored.  If `alternate` is a relative path, its parent will be taken to be `parent`.

This call is designed for a situation where a conventional directory structure is being
elaborated, for example, a root directory that has subdirectories `bin`, `src`, `lib` and `doc`.
These subdirectory names are what the `child` parameter is intended for.  It represents 
some part of a conventional configuration.  The typical call looks like
<pre class="exampleCode">

      bin = File.normalized_path parent, child: 'bin'

</pre>

It sets `bin` equal to the absolute path for `parent`'s `bin` subdirectory. 

The example is this sort of call that I want to look clean, but one has to allow overrides.
Suppose we have an app that normally looks for Python source files in the `libpy` directory of
the parent, but for debugging, the app wants to override that using a command line option.  Let
`options` be the parsed command line options.  The call in this case would look like

<pre class="exampleCode">

   libpy = File.normalized_path(parent, child: "libpy", alternate: options.lib)

</pre>

The effect is that if the invoker supplied an alternative to `"libpy"`as the value of the option
`"-lib"`, prepend the parent, if need be, to get an absolute path; otherwise, prepend the
parent to `"libpy"` to get the path."
   
=end  
   def self.normalized_path(parent=Dir.getwd, child: nil, alternate: nil)
      if alternate.nil? or alternate.length == 0
         if child.nil? or child.length == 0
            raise ArgumentError.new "Either an alternate path or a child must be supplied"
         else
            expand_path child, parent
         end
      else
         expand_path alternate, parent
      end
   end
=begin <md>

### <code>parent_directory(path)</code> ###

returns the _absolute path_ of the directory in which the file or directory named by `path` is to
be found.  No assertion is made as to whether the path actually names an existing directory. This is
a very modest extension of `File.dirname` that handles some special cases, like '.', where
`dirname` yields some puzzling values.  That puzzle is why I insist on absolute paths here.
   
=end 
   def self.parent_directory path
      dirname expand_path(path)
   end
end

